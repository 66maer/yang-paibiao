syntax = "proto3";

package api.XiaoYang.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "XiaoYang/api/XiaoYang/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080",
  base_path: "",
  info: {
    title: "xiaoyang api docs",
    version: "2.0",
  }
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Input a \"Bearer your-jwt-token\" to Value"
      }
    }
  }
};

service CharacterService {
  // 创建角色
  rpc CreateCharacter(CreateCharacterRequest) returns (CreateCharacterResponse) {
    option (google.api.http) = {
      post: "/api/v1/character/createCharacter"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "创建角色"
      description: "创建新的游戏角色"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 更新角色信息
  rpc UpdateCharacter(UpdateCharacterRequest) returns (UpdateCharacterResponse) {
    option (google.api.http) = {
      post: "/api/v1/character/updateCharacter"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新角色信息"
      description: "更新游戏角色的基本信息"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 删除角色
  rpc DeleteCharacter(DeleteCharacterRequest) returns (DeleteCharacterResponse) {
    option (google.api.http) = {
      post: "/api/v1/character/deleteCharacter"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除角色"
      description: "根据角色ID删除游戏角色"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 获取角色详情
  rpc GetCharacter(GetCharacterRequest) returns (GetCharacterResponse) {
    option (google.api.http) = {
      post: "/api/v1/character/getCharacter"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取角色详情"
      description: "根据角色ID获取游戏角色的详细信息"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 列出用户所有角色
  rpc ListUserCharacters(ListUserCharactersRequest) returns (ListUserCharactersResponse) {
    option (google.api.http) = {
      post: "/api/v1/character/listUserCharacters"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "列出用户所有角色"
      description: "获取用户创建的所有游戏角色"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }
}

// 创建角色请求
message CreateCharacterRequest {
  uint64 userId = 1;
  string name = 2;
  string server = 3;
  string xinfa = 4;
  string remark = 5;
}

// 创建角色响应
message CreateCharacterResponse {
  CharacterInfo characterInfo = 1;
}

// 更新角色请求
message UpdateCharacterRequest {
  uint64 characterId = 1;
  string name = 2;
  string server = 3;
  string xinfa = 4;
  string remark = 5;
}

// 更新角色响应
message UpdateCharacterResponse {
  CharacterInfo characterInfo = 1;
}

// 删除角色请求
message DeleteCharacterRequest {
  uint64 characterId = 1;
}

// 删除角色响应
message DeleteCharacterResponse {
  bool success = 1;
}

// 获取角色详情请求
message GetCharacterRequest {
  uint64 characterId = 1;
}

// 获取角色详情响应
message GetCharacterResponse {
  CharacterInfo characterInfo = 1;
}

// 列出用户所有角色请求
message ListUserCharactersRequest {
  uint64 userId = 1;
}

// 列出用户所有角色响应
message ListUserCharactersResponse {
  repeated CharacterInfo characters = 1;
}

// 角色基本信息
message CharacterInfo {
  uint64 characterId = 1;
  uint64 userId = 2;
  string name = 3;
  string server = 4;
  string xinfa = 5;
  string remark = 6;
}

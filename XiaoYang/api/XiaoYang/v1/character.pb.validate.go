// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/XiaoYang/v1/character.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCharacterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCharacterRequestMultiError, or nil if none found.
func (m *CreateCharacterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCharacterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Xinfa

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateCharacterRequestMultiError(errors)
	}

	return nil
}

// CreateCharacterRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCharacterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCharacterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCharacterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCharacterRequestMultiError) AllErrors() []error { return m }

// CreateCharacterRequestValidationError is the validation error returned by
// CreateCharacterRequest.Validate if the designated constraints aren't met.
type CreateCharacterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCharacterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCharacterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCharacterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCharacterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCharacterRequestValidationError) ErrorName() string {
	return "CreateCharacterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCharacterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCharacterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCharacterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCharacterRequestValidationError{}

// Validate checks the field values on CreateCharacterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCharacterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCharacterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCharacterResponseMultiError, or nil if none found.
func (m *CreateCharacterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCharacterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCharacterInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCharacterResponseValidationError{
					field:  "CharacterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCharacterResponseValidationError{
					field:  "CharacterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacterInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCharacterResponseValidationError{
				field:  "CharacterInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCharacterResponseMultiError(errors)
	}

	return nil
}

// CreateCharacterResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCharacterResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCharacterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCharacterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCharacterResponseMultiError) AllErrors() []error { return m }

// CreateCharacterResponseValidationError is the validation error returned by
// CreateCharacterResponse.Validate if the designated constraints aren't met.
type CreateCharacterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCharacterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCharacterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCharacterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCharacterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCharacterResponseValidationError) ErrorName() string {
	return "CreateCharacterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCharacterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCharacterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCharacterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCharacterResponseValidationError{}

// Validate checks the field values on UpdateCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCharacterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCharacterRequestMultiError, or nil if none found.
func (m *UpdateCharacterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCharacterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CharacterId

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Xinfa

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateCharacterRequestMultiError(errors)
	}

	return nil
}

// UpdateCharacterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCharacterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCharacterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCharacterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCharacterRequestMultiError) AllErrors() []error { return m }

// UpdateCharacterRequestValidationError is the validation error returned by
// UpdateCharacterRequest.Validate if the designated constraints aren't met.
type UpdateCharacterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCharacterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCharacterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCharacterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCharacterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCharacterRequestValidationError) ErrorName() string {
	return "UpdateCharacterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCharacterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCharacterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCharacterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCharacterRequestValidationError{}

// Validate checks the field values on UpdateCharacterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCharacterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCharacterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCharacterResponseMultiError, or nil if none found.
func (m *UpdateCharacterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCharacterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCharacterInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCharacterResponseValidationError{
					field:  "CharacterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCharacterResponseValidationError{
					field:  "CharacterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacterInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCharacterResponseValidationError{
				field:  "CharacterInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCharacterResponseMultiError(errors)
	}

	return nil
}

// UpdateCharacterResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCharacterResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCharacterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCharacterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCharacterResponseMultiError) AllErrors() []error { return m }

// UpdateCharacterResponseValidationError is the validation error returned by
// UpdateCharacterResponse.Validate if the designated constraints aren't met.
type UpdateCharacterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCharacterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCharacterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCharacterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCharacterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCharacterResponseValidationError) ErrorName() string {
	return "UpdateCharacterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCharacterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCharacterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCharacterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCharacterResponseValidationError{}

// Validate checks the field values on DeleteCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCharacterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCharacterRequestMultiError, or nil if none found.
func (m *DeleteCharacterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCharacterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CharacterId

	if len(errors) > 0 {
		return DeleteCharacterRequestMultiError(errors)
	}

	return nil
}

// DeleteCharacterRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCharacterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCharacterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCharacterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCharacterRequestMultiError) AllErrors() []error { return m }

// DeleteCharacterRequestValidationError is the validation error returned by
// DeleteCharacterRequest.Validate if the designated constraints aren't met.
type DeleteCharacterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCharacterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCharacterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCharacterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCharacterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCharacterRequestValidationError) ErrorName() string {
	return "DeleteCharacterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCharacterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCharacterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCharacterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCharacterRequestValidationError{}

// Validate checks the field values on DeleteCharacterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCharacterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCharacterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCharacterResponseMultiError, or nil if none found.
func (m *DeleteCharacterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCharacterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteCharacterResponseMultiError(errors)
	}

	return nil
}

// DeleteCharacterResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCharacterResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCharacterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCharacterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCharacterResponseMultiError) AllErrors() []error { return m }

// DeleteCharacterResponseValidationError is the validation error returned by
// DeleteCharacterResponse.Validate if the designated constraints aren't met.
type DeleteCharacterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCharacterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCharacterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCharacterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCharacterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCharacterResponseValidationError) ErrorName() string {
	return "DeleteCharacterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCharacterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCharacterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCharacterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCharacterResponseValidationError{}

// Validate checks the field values on GetCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCharacterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCharacterRequestMultiError, or nil if none found.
func (m *GetCharacterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCharacterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CharacterId

	if len(errors) > 0 {
		return GetCharacterRequestMultiError(errors)
	}

	return nil
}

// GetCharacterRequestMultiError is an error wrapping multiple validation
// errors returned by GetCharacterRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCharacterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCharacterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCharacterRequestMultiError) AllErrors() []error { return m }

// GetCharacterRequestValidationError is the validation error returned by
// GetCharacterRequest.Validate if the designated constraints aren't met.
type GetCharacterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCharacterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCharacterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCharacterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCharacterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCharacterRequestValidationError) ErrorName() string {
	return "GetCharacterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCharacterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCharacterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCharacterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCharacterRequestValidationError{}

// Validate checks the field values on GetCharacterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCharacterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCharacterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCharacterResponseMultiError, or nil if none found.
func (m *GetCharacterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCharacterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCharacterInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCharacterResponseValidationError{
					field:  "CharacterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCharacterResponseValidationError{
					field:  "CharacterInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCharacterInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCharacterResponseValidationError{
				field:  "CharacterInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCharacterResponseMultiError(errors)
	}

	return nil
}

// GetCharacterResponseMultiError is an error wrapping multiple validation
// errors returned by GetCharacterResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCharacterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCharacterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCharacterResponseMultiError) AllErrors() []error { return m }

// GetCharacterResponseValidationError is the validation error returned by
// GetCharacterResponse.Validate if the designated constraints aren't met.
type GetCharacterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCharacterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCharacterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCharacterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCharacterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCharacterResponseValidationError) ErrorName() string {
	return "GetCharacterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCharacterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCharacterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCharacterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCharacterResponseValidationError{}

// Validate checks the field values on ListUserCharactersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserCharactersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserCharactersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserCharactersRequestMultiError, or nil if none found.
func (m *ListUserCharactersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserCharactersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListUserCharactersRequestMultiError(errors)
	}

	return nil
}

// ListUserCharactersRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserCharactersRequest.ValidateAll() if the
// designated constraints aren't met.
type ListUserCharactersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserCharactersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserCharactersRequestMultiError) AllErrors() []error { return m }

// ListUserCharactersRequestValidationError is the validation error returned by
// ListUserCharactersRequest.Validate if the designated constraints aren't met.
type ListUserCharactersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCharactersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCharactersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCharactersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCharactersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCharactersRequestValidationError) ErrorName() string {
	return "ListUserCharactersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCharactersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCharactersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCharactersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCharactersRequestValidationError{}

// Validate checks the field values on ListUserCharactersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserCharactersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserCharactersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserCharactersResponseMultiError, or nil if none found.
func (m *ListUserCharactersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserCharactersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCharacters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserCharactersResponseValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserCharactersResponseValidationError{
						field:  fmt.Sprintf("Characters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserCharactersResponseValidationError{
					field:  fmt.Sprintf("Characters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserCharactersResponseMultiError(errors)
	}

	return nil
}

// ListUserCharactersResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserCharactersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserCharactersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserCharactersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserCharactersResponseMultiError) AllErrors() []error { return m }

// ListUserCharactersResponseValidationError is the validation error returned
// by ListUserCharactersResponse.Validate if the designated constraints aren't met.
type ListUserCharactersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCharactersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCharactersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCharactersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCharactersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCharactersResponseValidationError) ErrorName() string {
	return "ListUserCharactersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCharactersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCharactersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCharactersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCharactersResponseValidationError{}

// Validate checks the field values on CharacterInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CharacterInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CharacterInfoMultiError, or
// nil if none found.
func (m *CharacterInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CharacterId

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Xinfa

	// no validation rules for Remark

	if len(errors) > 0 {
		return CharacterInfoMultiError(errors)
	}

	return nil
}

// CharacterInfoMultiError is an error wrapping multiple validation errors
// returned by CharacterInfo.ValidateAll() if the designated constraints
// aren't met.
type CharacterInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterInfoMultiError) AllErrors() []error { return m }

// CharacterInfoValidationError is the validation error returned by
// CharacterInfo.Validate if the designated constraints aren't met.
type CharacterInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterInfoValidationError) ErrorName() string { return "CharacterInfoValidationError" }

// Error satisfies the builtin error interface
func (e CharacterInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterInfoValidationError{}

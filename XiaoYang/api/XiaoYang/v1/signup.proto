syntax = "proto3";

package api.XiaoYang.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "XiaoYang/api/XiaoYang/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080",
  base_path: "",
  info: {
    title: "xiaoyang signup api docs",
    version: "1.0",
  }
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Input a \"Bearer your-jwt-token\" to Value"
      }
    }
  }
};

service SignupService {
  // 批量报名
  rpc CreateSignup(CreateSignupRequest) returns (CreateSignupResponse) {
    option (google.api.http) = {
      post: "/api/v1/signup/createSignup"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "批量报名"
      description: "创建新的批量报名记录"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 批量取消报名
  rpc CancelSignup(CancelSignupRequest) returns (CancelSignupResponse) {
    option (google.api.http) = {
      post: "/api/v1/signup/cancelSignup"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "批量取消报名"
      description: "批量取消报名记录"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 根据teamId获取报名信息
  rpc GetSignupsByTeam(GetSignupsByTeamRequest) returns (GetSignupsByTeamResponse) {
    option (google.api.http) = {
      post: "/api/v1/signup/getSignupsByTeam"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取报名信息"
      description: "根据teamId获取报名信息"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }
}

// 批量报名请求
message CreateSignupRequest {
  repeated SignupInfo signups = 1;  // 批量报名信息
}

// 批量报名响应
message CreateSignupResponse {
  repeated SignupResult results = 1;  // 每个报名的结果
}

// 报名结果
message SignupResult {
  uint64 signupId = 1;      // 报名ID
  bool success = 2;         // 是否成功
  string errorMessage = 3;  // 错误信息（如果失败）
}

// 批量取消报名请求
message CancelSignupRequest {
  repeated uint64 signupIds = 1;  // 报名ID列表
  uint64 cancelUserId = 2;        // 取消操作的用户ID
}

// 批量取消报名响应
message CancelSignupResponse {
  repeated CancelResult results = 1;  // 每个取消操作的结果
}

// 取消结果
message CancelResult {
  uint64 signupId = 1;      // 报名ID
  bool success = 2;         // 是否成功
  string errorMessage = 3;  // 错误信息（如果失败）
}

// 获取报名信息请求
message GetSignupsByTeamRequest {
  uint64 teamId = 1;
}

// 获取报名信息响应
message GetSignupsByTeamResponse {
  repeated SignupInfo signups = 1;
}

// 报名信息
message SignupInfo {
  uint64 signupId = 1;
  uint64 teamId = 2;
  uint64 submitUserId = 3;
  uint64 signupUserId = 4;
  uint64 signupCharacterId = 5;
  string signupInfo = 6;  // 报名补充信息
  int32 priority = 7;
  bool isRich = 8;
  bool isProxy = 9;
  string clientType = 10;
  int32 lockSlot = 11;
  bool isDove = 12;
  bool isCandidate = 13;
  string signupTime = 14;  // ISO8601 格式
  uint64 cancelUserId = 15;
  string cancelTime = 16;  // ISO8601 格式
}

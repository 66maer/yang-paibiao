// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/XiaoYang/v1/guild.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GuildInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GuildInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GuildInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GuildInfoMultiError, or nil
// if none found.
func (m *GuildInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GuildInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for GuildQqNumber

	// no validation rules for Ukey

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Avatar

	// no validation rules for ExpireTime

	// no validation rules for Preferences

	if len(errors) > 0 {
		return GuildInfoMultiError(errors)
	}

	return nil
}

// GuildInfoMultiError is an error wrapping multiple validation errors returned
// by GuildInfo.ValidateAll() if the designated constraints aren't met.
type GuildInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GuildInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GuildInfoMultiError) AllErrors() []error { return m }

// GuildInfoValidationError is the validation error returned by
// GuildInfo.Validate if the designated constraints aren't met.
type GuildInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildInfoValidationError) ErrorName() string { return "GuildInfoValidationError" }

// Error satisfies the builtin error interface
func (e GuildInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildInfoValidationError{}

// Validate checks the field values on CreateGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGuildRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGuildRequestMultiError, or nil if none found.
func (m *CreateGuildRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGuildRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildQqNumber

	// no validation rules for Ukey

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Avatar

	// no validation rules for ExpireTime

	// no validation rules for Preferences

	if len(errors) > 0 {
		return CreateGuildRequestMultiError(errors)
	}

	return nil
}

// CreateGuildRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGuildRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGuildRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGuildRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGuildRequestMultiError) AllErrors() []error { return m }

// CreateGuildRequestValidationError is the validation error returned by
// CreateGuildRequest.Validate if the designated constraints aren't met.
type CreateGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGuildRequestValidationError) ErrorName() string {
	return "CreateGuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGuildRequestValidationError{}

// Validate checks the field values on CreateGuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGuildResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGuildResponseMultiError, or nil if none found.
func (m *CreateGuildResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGuildResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGuildInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGuildResponseValidationError{
					field:  "GuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGuildResponseValidationError{
					field:  "GuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuildInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGuildResponseValidationError{
				field:  "GuildInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGuildResponseMultiError(errors)
	}

	return nil
}

// CreateGuildResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGuildResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGuildResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGuildResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGuildResponseMultiError) AllErrors() []error { return m }

// CreateGuildResponseValidationError is the validation error returned by
// CreateGuildResponse.Validate if the designated constraints aren't met.
type CreateGuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGuildResponseValidationError) ErrorName() string {
	return "CreateGuildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGuildResponseValidationError{}

// Validate checks the field values on DeleteGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGuildRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGuildRequestMultiError, or nil if none found.
func (m *DeleteGuildRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGuildRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	if len(errors) > 0 {
		return DeleteGuildRequestMultiError(errors)
	}

	return nil
}

// DeleteGuildRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteGuildRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteGuildRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGuildRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGuildRequestMultiError) AllErrors() []error { return m }

// DeleteGuildRequestValidationError is the validation error returned by
// DeleteGuildRequest.Validate if the designated constraints aren't met.
type DeleteGuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGuildRequestValidationError) ErrorName() string {
	return "DeleteGuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGuildRequestValidationError{}

// Validate checks the field values on DeleteGuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGuildResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGuildResponseMultiError, or nil if none found.
func (m *DeleteGuildResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGuildResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteGuildResponseMultiError(errors)
	}

	return nil
}

// DeleteGuildResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGuildResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGuildResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGuildResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGuildResponseMultiError) AllErrors() []error { return m }

// DeleteGuildResponseValidationError is the validation error returned by
// DeleteGuildResponse.Validate if the designated constraints aren't met.
type DeleteGuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGuildResponseValidationError) ErrorName() string {
	return "DeleteGuildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGuildResponseValidationError{}

// Validate checks the field values on UpdateGuildInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGuildInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGuildInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGuildInfoRequestMultiError, or nil if none found.
func (m *UpdateGuildInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGuildInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for Ukey

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Avatar

	// no validation rules for ExpireTime

	// no validation rules for Preferences

	if len(errors) > 0 {
		return UpdateGuildInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateGuildInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGuildInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGuildInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGuildInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGuildInfoRequestMultiError) AllErrors() []error { return m }

// UpdateGuildInfoRequestValidationError is the validation error returned by
// UpdateGuildInfoRequest.Validate if the designated constraints aren't met.
type UpdateGuildInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGuildInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGuildInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGuildInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGuildInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGuildInfoRequestValidationError) ErrorName() string {
	return "UpdateGuildInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGuildInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGuildInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGuildInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGuildInfoRequestValidationError{}

// Validate checks the field values on UpdateGuildInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGuildInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGuildInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGuildInfoResponseMultiError, or nil if none found.
func (m *UpdateGuildInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGuildInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGuildInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGuildInfoResponseValidationError{
					field:  "GuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGuildInfoResponseValidationError{
					field:  "GuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuildInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGuildInfoResponseValidationError{
				field:  "GuildInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGuildInfoResponseMultiError(errors)
	}

	return nil
}

// UpdateGuildInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGuildInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGuildInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGuildInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGuildInfoResponseMultiError) AllErrors() []error { return m }

// UpdateGuildInfoResponseValidationError is the validation error returned by
// UpdateGuildInfoResponse.Validate if the designated constraints aren't met.
type UpdateGuildInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGuildInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGuildInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGuildInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGuildInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGuildInfoResponseValidationError) ErrorName() string {
	return "UpdateGuildInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGuildInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGuildInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGuildInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGuildInfoResponseValidationError{}

// Validate checks the field values on GetGuildInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGuildInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGuildInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGuildInfoRequestMultiError, or nil if none found.
func (m *GetGuildInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGuildInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	if len(errors) > 0 {
		return GetGuildInfoRequestMultiError(errors)
	}

	return nil
}

// GetGuildInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetGuildInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGuildInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGuildInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGuildInfoRequestMultiError) AllErrors() []error { return m }

// GetGuildInfoRequestValidationError is the validation error returned by
// GetGuildInfoRequest.Validate if the designated constraints aren't met.
type GetGuildInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInfoRequestValidationError) ErrorName() string {
	return "GetGuildInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInfoRequestValidationError{}

// Validate checks the field values on GetGuildInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGuildInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGuildInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGuildInfoResponseMultiError, or nil if none found.
func (m *GetGuildInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGuildInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGuildInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGuildInfoResponseValidationError{
					field:  "GuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGuildInfoResponseValidationError{
					field:  "GuildInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGuildInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGuildInfoResponseValidationError{
				field:  "GuildInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGuildInfoResponseMultiError(errors)
	}

	return nil
}

// GetGuildInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetGuildInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGuildInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGuildInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGuildInfoResponseMultiError) AllErrors() []error { return m }

// GetGuildInfoResponseValidationError is the validation error returned by
// GetGuildInfoResponse.Validate if the designated constraints aren't met.
type GetGuildInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildInfoResponseValidationError) ErrorName() string {
	return "GetGuildInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildInfoResponseValidationError{}

// Validate checks the field values on ListAllGuildsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllGuildsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllGuildsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllGuildsRequestMultiError, or nil if none found.
func (m *ListAllGuildsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllGuildsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAllGuildsRequestMultiError(errors)
	}

	return nil
}

// ListAllGuildsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAllGuildsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAllGuildsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllGuildsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllGuildsRequestMultiError) AllErrors() []error { return m }

// ListAllGuildsRequestValidationError is the validation error returned by
// ListAllGuildsRequest.Validate if the designated constraints aren't met.
type ListAllGuildsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllGuildsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllGuildsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllGuildsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllGuildsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllGuildsRequestValidationError) ErrorName() string {
	return "ListAllGuildsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllGuildsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllGuildsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllGuildsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllGuildsRequestValidationError{}

// Validate checks the field values on ListAllGuildsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllGuildsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllGuildsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllGuildsResponseMultiError, or nil if none found.
func (m *ListAllGuildsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllGuildsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGuilds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllGuildsResponseValidationError{
						field:  fmt.Sprintf("Guilds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllGuildsResponseValidationError{
						field:  fmt.Sprintf("Guilds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllGuildsResponseValidationError{
					field:  fmt.Sprintf("Guilds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllGuildsResponseMultiError(errors)
	}

	return nil
}

// ListAllGuildsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAllGuildsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAllGuildsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllGuildsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllGuildsResponseMultiError) AllErrors() []error { return m }

// ListAllGuildsResponseValidationError is the validation error returned by
// ListAllGuildsResponse.Validate if the designated constraints aren't met.
type ListAllGuildsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllGuildsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllGuildsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllGuildsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllGuildsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllGuildsResponseValidationError) ErrorName() string {
	return "ListAllGuildsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllGuildsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllGuildsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllGuildsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllGuildsResponseValidationError{}

// Validate checks the field values on ListUserGuildsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGuildsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGuildsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGuildsRequestMultiError, or nil if none found.
func (m *ListUserGuildsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGuildsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListUserGuildsRequestMultiError(errors)
	}

	return nil
}

// ListUserGuildsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserGuildsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserGuildsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGuildsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGuildsRequestMultiError) AllErrors() []error { return m }

// ListUserGuildsRequestValidationError is the validation error returned by
// ListUserGuildsRequest.Validate if the designated constraints aren't met.
type ListUserGuildsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGuildsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGuildsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGuildsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGuildsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGuildsRequestValidationError) ErrorName() string {
	return "ListUserGuildsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGuildsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGuildsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGuildsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGuildsRequestValidationError{}

// Validate checks the field values on ListUserGuildsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGuildsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGuildsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGuildsResponseMultiError, or nil if none found.
func (m *ListUserGuildsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGuildsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGuilds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGuildsResponseValidationError{
						field:  fmt.Sprintf("Guilds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGuildsResponseValidationError{
						field:  fmt.Sprintf("Guilds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGuildsResponseValidationError{
					field:  fmt.Sprintf("Guilds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserGuildsResponseMultiError(errors)
	}

	return nil
}

// ListUserGuildsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserGuildsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserGuildsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGuildsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGuildsResponseMultiError) AllErrors() []error { return m }

// ListUserGuildsResponseValidationError is the validation error returned by
// ListUserGuildsResponse.Validate if the designated constraints aren't met.
type ListUserGuildsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGuildsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGuildsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGuildsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGuildsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGuildsResponseValidationError) ErrorName() string {
	return "ListUserGuildsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGuildsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGuildsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGuildsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGuildsResponseValidationError{}

// Validate checks the field values on GuildMemberInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GuildMemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GuildMemberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GuildMemberInfoMultiError, or nil if none found.
func (m *GuildMemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GuildMemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for QqNumber

	// no validation rules for GroupRole

	// no validation rules for GroupNickname

	// no validation rules for Nickname

	if len(errors) > 0 {
		return GuildMemberInfoMultiError(errors)
	}

	return nil
}

// GuildMemberInfoMultiError is an error wrapping multiple validation errors
// returned by GuildMemberInfo.ValidateAll() if the designated constraints
// aren't met.
type GuildMemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GuildMemberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GuildMemberInfoMultiError) AllErrors() []error { return m }

// GuildMemberInfoValidationError is the validation error returned by
// GuildMemberInfo.Validate if the designated constraints aren't met.
type GuildMemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GuildMemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GuildMemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GuildMemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GuildMemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GuildMemberInfoValidationError) ErrorName() string { return "GuildMemberInfoValidationError" }

// Error satisfies the builtin error interface
func (e GuildMemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGuildMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GuildMemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GuildMemberInfoValidationError{}

// Validate checks the field values on ListGuildMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGuildMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGuildMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGuildMembersRequestMultiError, or nil if none found.
func (m *ListGuildMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGuildMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	if len(errors) > 0 {
		return ListGuildMembersRequestMultiError(errors)
	}

	return nil
}

// ListGuildMembersRequestMultiError is an error wrapping multiple validation
// errors returned by ListGuildMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGuildMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGuildMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGuildMembersRequestMultiError) AllErrors() []error { return m }

// ListGuildMembersRequestValidationError is the validation error returned by
// ListGuildMembersRequest.Validate if the designated constraints aren't met.
type ListGuildMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGuildMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGuildMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGuildMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGuildMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGuildMembersRequestValidationError) ErrorName() string {
	return "ListGuildMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGuildMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGuildMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGuildMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGuildMembersRequestValidationError{}

// Validate checks the field values on ListGuildMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGuildMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGuildMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGuildMembersResponseMultiError, or nil if none found.
func (m *ListGuildMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGuildMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGuildMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGuildMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGuildMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGuildMembersResponseMultiError(errors)
	}

	return nil
}

// ListGuildMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListGuildMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGuildMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGuildMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGuildMembersResponseMultiError) AllErrors() []error { return m }

// ListGuildMembersResponseValidationError is the validation error returned by
// ListGuildMembersResponse.Validate if the designated constraints aren't met.
type ListGuildMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGuildMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGuildMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGuildMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGuildMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGuildMembersResponseValidationError) ErrorName() string {
	return "ListGuildMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGuildMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGuildMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGuildMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGuildMembersResponseValidationError{}

// Validate checks the field values on AddGuildMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGuildMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGuildMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGuildMemberRequestMultiError, or nil if none found.
func (m *AddGuildMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGuildMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for UserId

	// no validation rules for Role

	// no validation rules for GroupNickname

	if len(errors) > 0 {
		return AddGuildMemberRequestMultiError(errors)
	}

	return nil
}

// AddGuildMemberRequestMultiError is an error wrapping multiple validation
// errors returned by AddGuildMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type AddGuildMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGuildMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGuildMemberRequestMultiError) AllErrors() []error { return m }

// AddGuildMemberRequestValidationError is the validation error returned by
// AddGuildMemberRequest.Validate if the designated constraints aren't met.
type AddGuildMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGuildMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGuildMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGuildMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGuildMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGuildMemberRequestValidationError) ErrorName() string {
	return "AddGuildMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddGuildMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGuildMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGuildMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGuildMemberRequestValidationError{}

// Validate checks the field values on AddGuildMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddGuildMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddGuildMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddGuildMemberResponseMultiError, or nil if none found.
func (m *AddGuildMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddGuildMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMemberInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddGuildMemberResponseValidationError{
					field:  "MemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddGuildMemberResponseValidationError{
					field:  "MemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemberInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddGuildMemberResponseValidationError{
				field:  "MemberInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddGuildMemberResponseMultiError(errors)
	}

	return nil
}

// AddGuildMemberResponseMultiError is an error wrapping multiple validation
// errors returned by AddGuildMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type AddGuildMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddGuildMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddGuildMemberResponseMultiError) AllErrors() []error { return m }

// AddGuildMemberResponseValidationError is the validation error returned by
// AddGuildMemberResponse.Validate if the designated constraints aren't met.
type AddGuildMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGuildMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGuildMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGuildMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGuildMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGuildMemberResponseValidationError) ErrorName() string {
	return "AddGuildMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddGuildMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGuildMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGuildMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGuildMemberResponseValidationError{}

// Validate checks the field values on RemoveGuildMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGuildMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGuildMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGuildMemberRequestMultiError, or nil if none found.
func (m *RemoveGuildMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGuildMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for UserId

	if len(errors) > 0 {
		return RemoveGuildMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveGuildMemberRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveGuildMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveGuildMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGuildMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGuildMemberRequestMultiError) AllErrors() []error { return m }

// RemoveGuildMemberRequestValidationError is the validation error returned by
// RemoveGuildMemberRequest.Validate if the designated constraints aren't met.
type RemoveGuildMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGuildMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGuildMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGuildMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGuildMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGuildMemberRequestValidationError) ErrorName() string {
	return "RemoveGuildMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGuildMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGuildMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGuildMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGuildMemberRequestValidationError{}

// Validate checks the field values on RemoveGuildMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveGuildMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveGuildMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveGuildMemberResponseMultiError, or nil if none found.
func (m *RemoveGuildMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveGuildMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RemoveGuildMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveGuildMemberResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveGuildMemberResponse.ValidateAll() if the
// designated constraints aren't met.
type RemoveGuildMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveGuildMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveGuildMemberResponseMultiError) AllErrors() []error { return m }

// RemoveGuildMemberResponseValidationError is the validation error returned by
// RemoveGuildMemberResponse.Validate if the designated constraints aren't met.
type RemoveGuildMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGuildMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGuildMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGuildMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGuildMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGuildMemberResponseValidationError) ErrorName() string {
	return "RemoveGuildMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGuildMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGuildMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGuildMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGuildMemberResponseValidationError{}

// Validate checks the field values on UpdateGuildMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGuildMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGuildMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGuildMemberRequestMultiError, or nil if none found.
func (m *UpdateGuildMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGuildMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for UserId

	// no validation rules for Role

	// no validation rules for GroupNickname

	if len(errors) > 0 {
		return UpdateGuildMemberRequestMultiError(errors)
	}

	return nil
}

// UpdateGuildMemberRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGuildMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGuildMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGuildMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGuildMemberRequestMultiError) AllErrors() []error { return m }

// UpdateGuildMemberRequestValidationError is the validation error returned by
// UpdateGuildMemberRequest.Validate if the designated constraints aren't met.
type UpdateGuildMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGuildMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGuildMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGuildMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGuildMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGuildMemberRequestValidationError) ErrorName() string {
	return "UpdateGuildMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGuildMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGuildMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGuildMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGuildMemberRequestValidationError{}

// Validate checks the field values on UpdateGuildMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGuildMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGuildMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGuildMemberResponseMultiError, or nil if none found.
func (m *UpdateGuildMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGuildMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMemberInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGuildMemberResponseValidationError{
					field:  "MemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGuildMemberResponseValidationError{
					field:  "MemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemberInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGuildMemberResponseValidationError{
				field:  "MemberInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGuildMemberResponseMultiError(errors)
	}

	return nil
}

// UpdateGuildMemberResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGuildMemberResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateGuildMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGuildMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGuildMemberResponseMultiError) AllErrors() []error { return m }

// UpdateGuildMemberResponseValidationError is the validation error returned by
// UpdateGuildMemberResponse.Validate if the designated constraints aren't met.
type UpdateGuildMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGuildMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGuildMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGuildMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGuildMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGuildMemberResponseValidationError) ErrorName() string {
	return "UpdateGuildMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGuildMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGuildMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGuildMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGuildMemberResponseValidationError{}

// Validate checks the field values on GetGuildMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGuildMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGuildMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGuildMemberRequestMultiError, or nil if none found.
func (m *GetGuildMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGuildMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetGuildMemberRequestMultiError(errors)
	}

	return nil
}

// GetGuildMemberRequestMultiError is an error wrapping multiple validation
// errors returned by GetGuildMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGuildMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGuildMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGuildMemberRequestMultiError) AllErrors() []error { return m }

// GetGuildMemberRequestValidationError is the validation error returned by
// GetGuildMemberRequest.Validate if the designated constraints aren't met.
type GetGuildMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildMemberRequestValidationError) ErrorName() string {
	return "GetGuildMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildMemberRequestValidationError{}

// Validate checks the field values on GetGuildMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGuildMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGuildMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGuildMemberResponseMultiError, or nil if none found.
func (m *GetGuildMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGuildMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMemberInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGuildMemberResponseValidationError{
					field:  "MemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGuildMemberResponseValidationError{
					field:  "MemberInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemberInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGuildMemberResponseValidationError{
				field:  "MemberInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGuildMemberResponseMultiError(errors)
	}

	return nil
}

// GetGuildMemberResponseMultiError is an error wrapping multiple validation
// errors returned by GetGuildMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGuildMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGuildMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGuildMemberResponseMultiError) AllErrors() []error { return m }

// GetGuildMemberResponseValidationError is the validation error returned by
// GetGuildMemberResponse.Validate if the designated constraints aren't met.
type GetGuildMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGuildMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGuildMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGuildMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGuildMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGuildMemberResponseValidationError) ErrorName() string {
	return "GetGuildMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGuildMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGuildMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGuildMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGuildMemberResponseValidationError{}

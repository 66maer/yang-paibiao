// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/XiaoYang/v1/team.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamRequestMultiError, or nil if none found.
func (m *CreateTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for CreaterId

	// no validation rules for Title

	// no validation rules for Dungeons

	// no validation rules for BookXuanjing

	// no validation rules for BookYuntie

	// no validation rules for IsVisible

	// no validation rules for IsLock

	// no validation rules for Rule

	// no validation rules for Notice

	// no validation rules for TeamTime

	if len(errors) > 0 {
		return CreateTeamRequestMultiError(errors)
	}

	return nil
}

// CreateTeamRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamRequestMultiError) AllErrors() []error { return m }

// CreateTeamRequestValidationError is the validation error returned by
// CreateTeamRequest.Validate if the designated constraints aren't met.
type CreateTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamRequestValidationError) ErrorName() string {
	return "CreateTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamRequestValidationError{}

// Validate checks the field values on CreateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamResponseMultiError, or nil if none found.
func (m *CreateTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if len(errors) > 0 {
		return CreateTeamResponseMultiError(errors)
	}

	return nil
}

// CreateTeamResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTeamResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamResponseMultiError) AllErrors() []error { return m }

// CreateTeamResponseValidationError is the validation error returned by
// CreateTeamResponse.Validate if the designated constraints aren't met.
type CreateTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamResponseValidationError) ErrorName() string {
	return "CreateTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamResponseValidationError{}

// Validate checks the field values on CloseTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloseTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseTeamRequestMultiError, or nil if none found.
func (m *CloseTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for CloseId

	if len(errors) > 0 {
		return CloseTeamRequestMultiError(errors)
	}

	return nil
}

// CloseTeamRequestMultiError is an error wrapping multiple validation errors
// returned by CloseTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type CloseTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTeamRequestMultiError) AllErrors() []error { return m }

// CloseTeamRequestValidationError is the validation error returned by
// CloseTeamRequest.Validate if the designated constraints aren't met.
type CloseTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTeamRequestValidationError) ErrorName() string { return "CloseTeamRequestValidationError" }

// Error satisfies the builtin error interface
func (e CloseTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTeamRequestValidationError{}

// Validate checks the field values on CloseTeamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloseTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseTeamResponseMultiError, or nil if none found.
func (m *CloseTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CloseTeamResponseMultiError(errors)
	}

	return nil
}

// CloseTeamResponseMultiError is an error wrapping multiple validation errors
// returned by CloseTeamResponse.ValidateAll() if the designated constraints
// aren't met.
type CloseTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTeamResponseMultiError) AllErrors() []error { return m }

// CloseTeamResponseValidationError is the validation error returned by
// CloseTeamResponse.Validate if the designated constraints aren't met.
type CloseTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTeamResponseValidationError) ErrorName() string {
	return "CloseTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloseTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTeamResponseValidationError{}

// Validate checks the field values on UpdateTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeamRequestMultiError, or nil if none found.
func (m *UpdateTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for Title

	// no validation rules for Dungeons

	// no validation rules for BookXuanjing

	// no validation rules for BookYuntie

	// no validation rules for IsVisible

	// no validation rules for IsLock

	// no validation rules for Rule

	// no validation rules for Notice

	// no validation rules for TeamTime

	if len(errors) > 0 {
		return UpdateTeamRequestMultiError(errors)
	}

	return nil
}

// UpdateTeamRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeamRequestMultiError) AllErrors() []error { return m }

// UpdateTeamRequestValidationError is the validation error returned by
// UpdateTeamRequest.Validate if the designated constraints aren't met.
type UpdateTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamRequestValidationError) ErrorName() string {
	return "UpdateTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamRequestValidationError{}

// Validate checks the field values on UpdateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeamResponseMultiError, or nil if none found.
func (m *UpdateTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateTeamResponseMultiError(errors)
	}

	return nil
}

// UpdateTeamResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateTeamResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeamResponseMultiError) AllErrors() []error { return m }

// UpdateTeamResponseValidationError is the validation error returned by
// UpdateTeamResponse.Validate if the designated constraints aren't met.
type UpdateTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamResponseValidationError) ErrorName() string {
	return "UpdateTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamResponseValidationError{}

// Validate checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateRequestMultiError, or nil if none found.
func (m *CreateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for CreaterId

	// no validation rules for Title

	// no validation rules for Rule

	// no validation rules for Notice

	if len(errors) > 0 {
		return CreateTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateRequestMultiError) AllErrors() []error { return m }

// CreateTemplateRequestValidationError is the validation error returned by
// CreateTemplateRequest.Validate if the designated constraints aren't met.
type CreateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateRequestValidationError) ErrorName() string {
	return "CreateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateRequestValidationError{}

// Validate checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateResponseMultiError, or nil if none found.
func (m *CreateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return CreateTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateResponseMultiError) AllErrors() []error { return m }

// CreateTemplateResponseValidationError is the validation error returned by
// CreateTemplateResponse.Validate if the designated constraints aren't met.
type CreateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateResponseValidationError) ErrorName() string {
	return "CreateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateResponseValidationError{}

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateResponseMultiError, or nil if none found.
func (m *DeleteTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateRequestMultiError, or nil if none found.
func (m *UpdateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	// no validation rules for Title

	// no validation rules for Rule

	// no validation rules for Notice

	if len(errors) > 0 {
		return UpdateTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateTemplateRequestValidationError is the validation error returned by
// UpdateTemplateRequest.Validate if the designated constraints aren't met.
type UpdateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateRequestValidationError) ErrorName() string {
	return "UpdateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateRequestValidationError{}

// Validate checks the field values on UpdateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateResponseMultiError, or nil if none found.
func (m *UpdateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateTemplateResponseValidationError is the validation error returned by
// UpdateTemplateResponse.Validate if the designated constraints aren't met.
type UpdateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateResponseValidationError) ErrorName() string {
	return "UpdateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateResponseValidationError{}

// Validate checks the field values on GetTeamRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTeamRequestMultiError,
// or nil if none found.
func (m *GetTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if len(errors) > 0 {
		return GetTeamRequestMultiError(errors)
	}

	return nil
}

// GetTeamRequestMultiError is an error wrapping multiple validation errors
// returned by GetTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamRequestMultiError) AllErrors() []error { return m }

// GetTeamRequestValidationError is the validation error returned by
// GetTeamRequest.Validate if the designated constraints aren't met.
type GetTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamRequestValidationError) ErrorName() string { return "GetTeamRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamRequestValidationError{}

// Validate checks the field values on GetTeamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamResponseMultiError, or nil if none found.
func (m *GetTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTeamInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeamResponseValidationError{
					field:  "TeamInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeamResponseValidationError{
					field:  "TeamInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeamInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeamResponseValidationError{
				field:  "TeamInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTeamResponseMultiError(errors)
	}

	return nil
}

// GetTeamResponseMultiError is an error wrapping multiple validation errors
// returned by GetTeamResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamResponseMultiError) AllErrors() []error { return m }

// GetTeamResponseValidationError is the validation error returned by
// GetTeamResponse.Validate if the designated constraints aren't met.
type GetTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamResponseValidationError) ErrorName() string { return "GetTeamResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamResponseValidationError{}

// Validate checks the field values on ListTeamsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTeamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamsRequestMultiError, or nil if none found.
func (m *ListTeamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	// no validation rules for IncludeClose

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListTeamsRequestMultiError(errors)
	}

	return nil
}

// ListTeamsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTeamsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTeamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamsRequestMultiError) AllErrors() []error { return m }

// ListTeamsRequestValidationError is the validation error returned by
// ListTeamsRequest.Validate if the designated constraints aren't met.
type ListTeamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamsRequestValidationError) ErrorName() string { return "ListTeamsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTeamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamsRequestValidationError{}

// Validate checks the field values on ListTeamsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTeamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamsResponseMultiError, or nil if none found.
func (m *ListTeamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeamsResponseValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeamsResponseValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeamsResponseValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeamsResponseMultiError(errors)
	}

	return nil
}

// ListTeamsResponseMultiError is an error wrapping multiple validation errors
// returned by ListTeamsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTeamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamsResponseMultiError) AllErrors() []error { return m }

// ListTeamsResponseValidationError is the validation error returned by
// ListTeamsResponse.Validate if the designated constraints aren't met.
type ListTeamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamsResponseValidationError) ErrorName() string {
	return "ListTeamsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamsResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateResponseMultiError, or nil if none found.
func (m *GetTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplateInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "TemplateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "TemplateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplateInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTemplateResponseValidationError{
				field:  "TemplateInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateResponseMultiError) AllErrors() []error { return m }

// GetTemplateResponseValidationError is the validation error returned by
// GetTemplateResponse.Validate if the designated constraints aren't met.
type GetTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateResponseValidationError) ErrorName() string {
	return "GetTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateResponseValidationError{}

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesRequestMultiError, or nil if none found.
func (m *ListTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GuildId

	if len(errors) > 0 {
		return ListTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesRequestMultiError) AllErrors() []error { return m }

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesResponseMultiError, or nil if none found.
func (m *ListTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesResponseMultiError) AllErrors() []error { return m }

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on TeamInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeamInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeamInfoMultiError, or nil
// if none found.
func (m *TeamInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for GuildId

	// no validation rules for CreaterId

	// no validation rules for Title

	// no validation rules for Dungeons

	// no validation rules for BookXuanjing

	// no validation rules for BookYuntie

	// no validation rules for IsVisible

	// no validation rules for IsLock

	// no validation rules for Rule

	// no validation rules for Notice

	// no validation rules for Summary

	// no validation rules for TeamTime

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for CloseTime

	// no validation rules for CloseId

	if len(errors) > 0 {
		return TeamInfoMultiError(errors)
	}

	return nil
}

// TeamInfoMultiError is an error wrapping multiple validation errors returned
// by TeamInfo.ValidateAll() if the designated constraints aren't met.
type TeamInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamInfoMultiError) AllErrors() []error { return m }

// TeamInfoValidationError is the validation error returned by
// TeamInfo.Validate if the designated constraints aren't met.
type TeamInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamInfoValidationError) ErrorName() string { return "TeamInfoValidationError" }

// Error satisfies the builtin error interface
func (e TeamInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamInfoValidationError{}

// Validate checks the field values on TemplateInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TemplateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TemplateInfoMultiError, or
// nil if none found.
func (m *TemplateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	// no validation rules for GuildId

	// no validation rules for CreaterId

	// no validation rules for Title

	// no validation rules for Rule

	// no validation rules for Notice

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return TemplateInfoMultiError(errors)
	}

	return nil
}

// TemplateInfoMultiError is an error wrapping multiple validation errors
// returned by TemplateInfo.ValidateAll() if the designated constraints aren't met.
type TemplateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateInfoMultiError) AllErrors() []error { return m }

// TemplateInfoValidationError is the validation error returned by
// TemplateInfo.Validate if the designated constraints aren't met.
type TemplateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateInfoValidationError) ErrorName() string { return "TemplateInfoValidationError" }

// Error satisfies the builtin error interface
func (e TemplateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateInfoValidationError{}

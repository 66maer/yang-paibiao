// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/XiaoYang/v1/signup.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSignupRequestMultiError, or nil if none found.
func (m *CreateSignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for SubmitUserId

	// no validation rules for SignupUserId

	// no validation rules for SignupCharacterId

	// no validation rules for SignupInfo

	// no validation rules for Priority

	// no validation rules for IsRich

	// no validation rules for IsProxy

	// no validation rules for ClientType

	// no validation rules for LockSlot

	if len(errors) > 0 {
		return CreateSignupRequestMultiError(errors)
	}

	return nil
}

// CreateSignupRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSignupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSignupRequestMultiError) AllErrors() []error { return m }

// CreateSignupRequestValidationError is the validation error returned by
// CreateSignupRequest.Validate if the designated constraints aren't met.
type CreateSignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSignupRequestValidationError) ErrorName() string {
	return "CreateSignupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSignupRequestValidationError{}

// Validate checks the field values on CreateSignupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSignupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSignupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSignupResponseMultiError, or nil if none found.
func (m *CreateSignupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSignupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CreateSignupResponseMultiError(errors)
	}

	return nil
}

// CreateSignupResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSignupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSignupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSignupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSignupResponseMultiError) AllErrors() []error { return m }

// CreateSignupResponseValidationError is the validation error returned by
// CreateSignupResponse.Validate if the designated constraints aren't met.
type CreateSignupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSignupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSignupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSignupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSignupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSignupResponseValidationError) ErrorName() string {
	return "CreateSignupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSignupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSignupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSignupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSignupResponseValidationError{}

// Validate checks the field values on CancelSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSignupRequestMultiError, or nil if none found.
func (m *CancelSignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignupId

	// no validation rules for CancelUserId

	if len(errors) > 0 {
		return CancelSignupRequestMultiError(errors)
	}

	return nil
}

// CancelSignupRequestMultiError is an error wrapping multiple validation
// errors returned by CancelSignupRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelSignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSignupRequestMultiError) AllErrors() []error { return m }

// CancelSignupRequestValidationError is the validation error returned by
// CancelSignupRequest.Validate if the designated constraints aren't met.
type CancelSignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSignupRequestValidationError) ErrorName() string {
	return "CancelSignupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSignupRequestValidationError{}

// Validate checks the field values on CancelSignupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSignupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSignupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSignupResponseMultiError, or nil if none found.
func (m *CancelSignupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSignupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CancelSignupResponseMultiError(errors)
	}

	return nil
}

// CancelSignupResponseMultiError is an error wrapping multiple validation
// errors returned by CancelSignupResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelSignupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSignupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSignupResponseMultiError) AllErrors() []error { return m }

// CancelSignupResponseValidationError is the validation error returned by
// CancelSignupResponse.Validate if the designated constraints aren't met.
type CancelSignupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSignupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSignupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSignupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSignupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSignupResponseValidationError) ErrorName() string {
	return "CancelSignupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSignupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSignupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSignupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSignupResponseValidationError{}

// Validate checks the field values on GetSignupsByTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSignupsByTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSignupsByTeamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSignupsByTeamRequestMultiError, or nil if none found.
func (m *GetSignupsByTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSignupsByTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if len(errors) > 0 {
		return GetSignupsByTeamRequestMultiError(errors)
	}

	return nil
}

// GetSignupsByTeamRequestMultiError is an error wrapping multiple validation
// errors returned by GetSignupsByTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSignupsByTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSignupsByTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSignupsByTeamRequestMultiError) AllErrors() []error { return m }

// GetSignupsByTeamRequestValidationError is the validation error returned by
// GetSignupsByTeamRequest.Validate if the designated constraints aren't met.
type GetSignupsByTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignupsByTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignupsByTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignupsByTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignupsByTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignupsByTeamRequestValidationError) ErrorName() string {
	return "GetSignupsByTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSignupsByTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignupsByTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignupsByTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignupsByTeamRequestValidationError{}

// Validate checks the field values on GetSignupsByTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSignupsByTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSignupsByTeamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSignupsByTeamResponseMultiError, or nil if none found.
func (m *GetSignupsByTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSignupsByTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSignups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSignupsByTeamResponseValidationError{
						field:  fmt.Sprintf("Signups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSignupsByTeamResponseValidationError{
						field:  fmt.Sprintf("Signups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSignupsByTeamResponseValidationError{
					field:  fmt.Sprintf("Signups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSignupsByTeamResponseMultiError(errors)
	}

	return nil
}

// GetSignupsByTeamResponseMultiError is an error wrapping multiple validation
// errors returned by GetSignupsByTeamResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSignupsByTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSignupsByTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSignupsByTeamResponseMultiError) AllErrors() []error { return m }

// GetSignupsByTeamResponseValidationError is the validation error returned by
// GetSignupsByTeamResponse.Validate if the designated constraints aren't met.
type GetSignupsByTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignupsByTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignupsByTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignupsByTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignupsByTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignupsByTeamResponseValidationError) ErrorName() string {
	return "GetSignupsByTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSignupsByTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignupsByTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignupsByTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignupsByTeamResponseValidationError{}

// Validate checks the field values on SignupInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignupInfoMultiError, or
// nil if none found.
func (m *SignupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignupId

	// no validation rules for TeamId

	// no validation rules for SubmitUserId

	// no validation rules for SignupUserId

	// no validation rules for SignupCharacterId

	// no validation rules for SignupInfo

	// no validation rules for Priority

	// no validation rules for IsRich

	// no validation rules for IsProxy

	// no validation rules for ClientType

	// no validation rules for LockSlot

	// no validation rules for IsDove

	// no validation rules for IsCandidate

	// no validation rules for SignupTime

	// no validation rules for CancelUserId

	// no validation rules for CancelTime

	if len(errors) > 0 {
		return SignupInfoMultiError(errors)
	}

	return nil
}

// SignupInfoMultiError is an error wrapping multiple validation errors
// returned by SignupInfo.ValidateAll() if the designated constraints aren't met.
type SignupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupInfoMultiError) AllErrors() []error { return m }

// SignupInfoValidationError is the validation error returned by
// SignupInfo.Validate if the designated constraints aren't met.
type SignupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupInfoValidationError) ErrorName() string { return "SignupInfoValidationError" }

// Error satisfies the builtin error interface
func (e SignupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupInfoValidationError{}

// Code generated by https://github.com/go-dev-frame/sponge, DO NOT EDIT.

package v1

import (
	"context"
	"errors"
	"strings"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"

	"github.com/go-dev-frame/sponge/pkg/errcode"
	"github.com/go-dev-frame/sponge/pkg/gin/middleware"
)

type TeamServiceLogicer interface {
	CreateTeam(ctx context.Context, req *CreateTeamRequest) (*CreateTeamResponse, error)
	CloseTeam(ctx context.Context, req *CloseTeamRequest) (*CloseTeamResponse, error)
	UpdateTeam(ctx context.Context, req *UpdateTeamRequest) (*UpdateTeamResponse, error)
	CreateTemplate(ctx context.Context, req *CreateTemplateRequest) (*CreateTemplateResponse, error)
	DeleteTemplate(ctx context.Context, req *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	UpdateTemplate(ctx context.Context, req *UpdateTemplateRequest) (*UpdateTemplateResponse, error)
	GetTeam(ctx context.Context, req *GetTeamRequest) (*GetTeamResponse, error)
	ListTeams(ctx context.Context, req *ListTeamsRequest) (*ListTeamsResponse, error)
	GetTemplate(ctx context.Context, req *GetTemplateRequest) (*GetTemplateResponse, error)
	ListTemplates(ctx context.Context, req *ListTemplatesRequest) (*ListTemplatesResponse, error)
}

type TeamServiceOption func(*teamServiceOptions)

type teamServiceOptions struct {
	isFromRPC  bool
	responser  errcode.Responser
	zapLog     *zap.Logger
	httpErrors []*errcode.Error
	rpcStatus  []*errcode.RPCStatus
	wrapCtxFn  func(c *gin.Context) context.Context
}

func (o *teamServiceOptions) apply(opts ...TeamServiceOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func WithTeamServiceHTTPResponse() TeamServiceOption {
	return func(o *teamServiceOptions) {
		o.isFromRPC = false
	}
}

func WithTeamServiceRPCResponse() TeamServiceOption {
	return func(o *teamServiceOptions) {
		o.isFromRPC = true
	}
}

func WithTeamServiceResponser(responser errcode.Responser) TeamServiceOption {
	return func(o *teamServiceOptions) {
		o.responser = responser
	}
}

func WithTeamServiceLogger(zapLog *zap.Logger) TeamServiceOption {
	return func(o *teamServiceOptions) {
		o.zapLog = zapLog
	}
}

func WithTeamServiceErrorToHTTPCode(e ...*errcode.Error) TeamServiceOption {
	return func(o *teamServiceOptions) {
		o.httpErrors = e
	}
}

func WithTeamServiceRPCStatusToHTTPCode(s ...*errcode.RPCStatus) TeamServiceOption {
	return func(o *teamServiceOptions) {
		o.rpcStatus = s
	}
}

func WithTeamServiceWrapCtx(wrapCtxFn func(c *gin.Context) context.Context) TeamServiceOption {
	return func(o *teamServiceOptions) {
		o.wrapCtxFn = wrapCtxFn
	}
}

func RegisterTeamServiceRouter(
	iRouter gin.IRouter,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iLogic TeamServiceLogicer,
	opts ...TeamServiceOption) {

	o := &teamServiceOptions{}
	o.apply(opts...)

	if o.responser == nil {
		o.responser = errcode.NewResponser(o.isFromRPC, o.httpErrors, o.rpcStatus)
	}
	if o.zapLog == nil {
		o.zapLog, _ = zap.NewProduction()
	}

	r := &teamServiceRouter{
		iRouter:               iRouter,
		groupPathMiddlewares:  groupPathMiddlewares,
		singlePathMiddlewares: singlePathMiddlewares,
		iLogic:                iLogic,
		iResponse:             o.responser,
		zapLog:                o.zapLog,
		wrapCtxFn:             o.wrapCtxFn,
	}
	r.register()
}

type teamServiceRouter struct {
	iRouter               gin.IRouter
	groupPathMiddlewares  map[string][]gin.HandlerFunc
	singlePathMiddlewares map[string][]gin.HandlerFunc
	iLogic                TeamServiceLogicer
	iResponse             errcode.Responser
	zapLog                *zap.Logger
	wrapCtxFn             func(c *gin.Context) context.Context
}

func (r *teamServiceRouter) register() {
	r.iRouter.Handle("POST", "/api/v1/team/createTeam", r.withMiddleware("POST", "/api/v1/team/createTeam", r.CreateTeam_0)...)
	r.iRouter.Handle("POST", "/api/v1/team/closeTeam", r.withMiddleware("POST", "/api/v1/team/closeTeam", r.CloseTeam_0)...)
	r.iRouter.Handle("POST", "/api/v1/team/updateTeam", r.withMiddleware("POST", "/api/v1/team/updateTeam", r.UpdateTeam_0)...)
	r.iRouter.Handle("POST", "/api/v1/template/createTemplate", r.withMiddleware("POST", "/api/v1/template/createTemplate", r.CreateTemplate_0)...)
	r.iRouter.Handle("POST", "/api/v1/template/deleteTemplate", r.withMiddleware("POST", "/api/v1/template/deleteTemplate", r.DeleteTemplate_0)...)
	r.iRouter.Handle("POST", "/api/v1/template/updateTemplate", r.withMiddleware("POST", "/api/v1/template/updateTemplate", r.UpdateTemplate_0)...)
	r.iRouter.Handle("POST", "/api/v1/team/getTeam", r.withMiddleware("POST", "/api/v1/team/getTeam", r.GetTeam_0)...)
	r.iRouter.Handle("POST", "/api/v1/team/listTeams", r.withMiddleware("POST", "/api/v1/team/listTeams", r.ListTeams_0)...)
	r.iRouter.Handle("POST", "/api/v1/template/getTemplate", r.withMiddleware("POST", "/api/v1/template/getTemplate", r.GetTemplate_0)...)
	r.iRouter.Handle("POST", "/api/v1/template/listTemplates", r.withMiddleware("POST", "/api/v1/template/listTemplates", r.ListTemplates_0)...)

}

func (r *teamServiceRouter) withMiddleware(method string, path string, fn gin.HandlerFunc) []gin.HandlerFunc {
	handlerFns := []gin.HandlerFunc{}

	// determine if a route group is hit or miss, left prefix rule
	for groupPath, fns := range r.groupPathMiddlewares {
		if groupPath == "" || groupPath == "/" {
			handlerFns = append(handlerFns, fns...)
			continue
		}
		size := len(groupPath)
		if len(path) < size {
			continue
		}
		if groupPath == path[:size] {
			handlerFns = append(handlerFns, fns...)
		}
	}

	// determine if a single route has been hit
	key := strings.ToUpper(method) + "->" + path
	if fns, ok := r.singlePathMiddlewares[key]; ok {
		handlerFns = append(handlerFns, fns...)
	}

	return append(handlerFns, fn)
}

func (r *teamServiceRouter) CreateTeam_0(c *gin.Context) {
	req := &CreateTeamRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CreateTeam(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) CloseTeam_0(c *gin.Context) {
	req := &CloseTeamRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CloseTeam(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) UpdateTeam_0(c *gin.Context) {
	req := &UpdateTeamRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UpdateTeam(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) CreateTemplate_0(c *gin.Context) {
	req := &CreateTemplateRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CreateTemplate(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) DeleteTemplate_0(c *gin.Context) {
	req := &DeleteTemplateRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.DeleteTemplate(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) UpdateTemplate_0(c *gin.Context) {
	req := &UpdateTemplateRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UpdateTemplate(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) GetTeam_0(c *gin.Context) {
	req := &GetTeamRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.GetTeam(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) ListTeams_0(c *gin.Context) {
	req := &ListTeamsRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListTeams(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) GetTemplate_0(c *gin.Context) {
	req := &GetTemplateRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.GetTemplate(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *teamServiceRouter) ListTemplates_0(c *gin.Context) {
	req := &ListTemplatesRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListTemplates(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

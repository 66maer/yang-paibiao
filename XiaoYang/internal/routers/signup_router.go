// Code generated by https://github.com/go-dev-frame/sponge

package routers

import (
	"github.com/gin-gonic/gin"

	"github.com/go-dev-frame/sponge/pkg/logger"
	//"github.com/go-dev-frame/sponge/pkg/middleware"

	XiaoYangV1 "XiaoYang/api/XiaoYang/v1"
	"XiaoYang/internal/handler"
)

func init() {
	allMiddlewareFns = append(allMiddlewareFns, func(c *middlewareConfig) {
		signupServiceMiddlewares(c)
	})

	allRouteFns = append(allRouteFns,
		func(r *gin.Engine, groupPathMiddlewares map[string][]gin.HandlerFunc, singlePathMiddlewares map[string][]gin.HandlerFunc) {
			signupServiceRouter(r, groupPathMiddlewares, singlePathMiddlewares, handler.NewSignupServiceHandler())
		})
}

func signupServiceRouter(
	r *gin.Engine,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iService XiaoYangV1.SignupServiceLogicer) {
	XiaoYangV1.RegisterSignupServiceRouter(
		r,
		groupPathMiddlewares,
		singlePathMiddlewares,
		iService,
		XiaoYangV1.WithSignupServiceLogger(logger.Get()),
		XiaoYangV1.WithSignupServiceHTTPResponse(),
		XiaoYangV1.WithSignupServiceErrorToHTTPCode(
		// Set some error codes to standard http return codes,
		// by default there is already ecode.InternalServerError and ecode.ServiceUnavailable
		// example:
		// 	ecode.Forbidden, ecode.LimitExceed,
		),
	)
}

// you can set the middleware of a route group, or set the middleware of a single route,
// or you can mix them, pay attention to the duplication of middleware when mixing them,
// it is recommended to set the middleware of a single route in preference
func signupServiceMiddlewares(c *middlewareConfig) {
	// set up group route middleware, group path is left prefix rules,
	// if the left prefix is hit, the middleware will take effect, e.g. group route is /api/v1, route /api/v1/signupService/:id  will take effect
	// c.setGroupPath("/api/v1/signupService", middleware.Auth())

	// set up single route middleware, just uncomment the code and fill in the middlewares, nothing else needs to be changed
	//c.setSinglePath("POST", "/api/v1/signup/createSignup", middleware.Auth())    // CreateSignup 报名
	//c.setSinglePath("POST", "/api/v1/signup/cancelSignup", middleware.Auth())    // CancelSignup 取消报名
	//c.setSinglePath("POST", "/api/v1/signup/getSignupsByTeam", middleware.Auth())    // GetSignupsByTeam 根据teamId获取报名信息
}

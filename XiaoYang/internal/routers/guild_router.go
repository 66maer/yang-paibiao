// Code generated by https://github.com/go-dev-frame/sponge

package routers

import (
	"github.com/gin-gonic/gin"

	"github.com/go-dev-frame/sponge/pkg/logger"
	//"github.com/go-dev-frame/sponge/pkg/middleware"

	XiaoYangV1 "XiaoYang/api/XiaoYang/v1"
	"XiaoYang/internal/handler"
)

func init() {
	allMiddlewareFns = append(allMiddlewareFns, func(c *middlewareConfig) {
		guildServiceMiddlewares(c)
	})

	allRouteFns = append(allRouteFns,
		func(r *gin.Engine, groupPathMiddlewares map[string][]gin.HandlerFunc, singlePathMiddlewares map[string][]gin.HandlerFunc) {
			guildServiceRouter(r, groupPathMiddlewares, singlePathMiddlewares, handler.NewGuildServiceHandler())
		})
}

func guildServiceRouter(
	r *gin.Engine,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iService XiaoYangV1.GuildServiceLogicer) {
	XiaoYangV1.RegisterGuildServiceRouter(
		r,
		groupPathMiddlewares,
		singlePathMiddlewares,
		iService,
		XiaoYangV1.WithGuildServiceLogger(logger.Get()),
		XiaoYangV1.WithGuildServiceHTTPResponse(),
		XiaoYangV1.WithGuildServiceErrorToHTTPCode(
		// Set some error codes to standard http return codes,
		// by default there is already ecode.InternalServerError and ecode.ServiceUnavailable
		// example:
		// 	ecode.Forbidden, ecode.LimitExceed,
		),
	)
}

// you can set the middleware of a route group, or set the middleware of a single route,
// or you can mix them, pay attention to the duplication of middleware when mixing them,
// it is recommended to set the middleware of a single route in preference
func guildServiceMiddlewares(c *middlewareConfig) {
	// set up group route middleware, group path is left prefix rules,
	// if the left prefix is hit, the middleware will take effect, e.g. group route is /api/v1, route /api/v1/guildService/:id  will take effect
	// c.setGroupPath("/api/v1/guildService", middleware.Auth())

	// set up single route middleware, just uncomment the code and fill in the middlewares, nothing else needs to be changed
	//c.setSinglePath("POST", "/api/v1/guild/createGuild", middleware.Auth())    // CreateGuild 创建群组
	//c.setSinglePath("POST", "/api/v1/guild/deleteGuild", middleware.Auth())    // DeleteGuild 删除群组
	//c.setSinglePath("POST", "/api/v1/guild/updateGuildInfo", middleware.Auth())    // UpdateGuildInfo 更新群组信息
	//c.setSinglePath("POST", "/api/v1/guild/getGuildInfo", middleware.Auth())    // GetGuildInfo 获取群组信息
	//c.setSinglePath("POST", "/api/v1/guild/listAllGuilds", middleware.Auth())    // ListAllGuilds 获取所有群组
	//c.setSinglePath("POST", "/api/v1/guild/listUserGuilds", middleware.Auth())    // ListUserGuilds 获取用户所在群组
	//c.setSinglePath("POST", "/api/v1/guild/listGuildMembers", middleware.Auth())    // ListGuildMembers 获取群组全部成员
	//c.setSinglePath("POST", "/api/v1/guild/addGuildMember", middleware.Auth())    // AddGuildMember 添加群组成员
	//c.setSinglePath("POST", "/api/v1/guild/removeGuildMember", middleware.Auth())    // RemoveGuildMember 移除群组成员
	//c.setSinglePath("POST", "/api/v1/guild/updateGuildMember", middleware.Auth())    // UpdateGuildMember 更新成员信息
	//c.setSinglePath("POST", "/api/v1/guild/getGuildMember", middleware.Auth())    // GetGuildMember 获取成员信息
}

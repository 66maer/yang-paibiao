// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"XiaoYang/internal/cache"
	"XiaoYang/internal/dao"
	"XiaoYang/internal/database"
	"XiaoYang/internal/ecode"
	"XiaoYang/internal/model"
	"context"

	"github.com/go-dev-frame/sponge/pkg/logger"
	"github.com/go-dev-frame/sponge/pkg/sgorm/query"

	XiaoYangV1 "XiaoYang/api/XiaoYang/v1"
)

var _ XiaoYangV1.CharacterServiceLogicer = (*characterServiceHandler)(nil)

type characterServiceHandler struct {
	characterDao dao.CharactersDao
}

// NewCharacterServiceHandler create a handler
func NewCharacterServiceHandler() XiaoYangV1.CharacterServiceLogicer {
	return &characterServiceHandler{
		characterDao: dao.NewCharactersDao(
			database.GetDB(),
			cache.NewCharactersCache(database.GetCacheType()),
		),
	}
}

// CreateCharacter 创建角色
func (h *characterServiceHandler) CreateCharacter(ctx context.Context, req *XiaoYangV1.CreateCharacterRequest) (*XiaoYangV1.CreateCharacterResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrCreateCharacterCharacterService.Err("请求参数无效，请检查输入")
	}

	character := &model.Characters{
		UserID: int(req.UserId),
		Name:   req.Name,
		Server: req.Server,
		Xinfa:  req.Xinfa,
		Remark: req.Remark,
	}

	err = h.characterDao.Create(ctx, character)
	if err != nil {
		logger.Warn("CreateCharacter error", logger.Err(err))
		return nil, ecode.ErrCreateCharacterCharacterService.Err("创建角色失败: " + err.Error())
	}

	return &XiaoYangV1.CreateCharacterResponse{
		CharacterInfo: &XiaoYangV1.CharacterInfo{
			CharacterId: character.ID,
			UserId:      uint64(character.UserID),
			Name:        character.Name,
			Server:      character.Server,
			Xinfa:       character.Xinfa,
			Remark:      character.Remark,
		},
	}, nil
}

// UpdateCharacter 更新角色信息
func (h *characterServiceHandler) UpdateCharacter(ctx context.Context, req *XiaoYangV1.UpdateCharacterRequest) (*XiaoYangV1.UpdateCharacterResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrUpdateCharacterCharacterService.Err("请求参数无效，请检查输入")
	}

	character := &model.Characters{
		ID:     req.CharacterId,
		Name:   req.Name,
		Server: req.Server,
		Xinfa:  req.Xinfa,
		Remark: req.Remark,
	}

	err = h.characterDao.UpdateByID(ctx, character)
	if err != nil {
		logger.Warn("UpdateCharacter error", logger.Err(err))
		return nil, ecode.ErrUpdateCharacterCharacterService.Err("更新角色信息失败: " + err.Error())
	}

	updatedCharacter, err := h.characterDao.GetByID(ctx, character.ID)
	if err != nil {
		logger.Warn("GetByID after update error", logger.Err(err))
		return nil, ecode.ErrUpdateCharacterCharacterService.Err("更新后获取角色信息失败: " + err.Error())
	}

	return &XiaoYangV1.UpdateCharacterResponse{
		CharacterInfo: &XiaoYangV1.CharacterInfo{
			CharacterId: updatedCharacter.ID,
			Name:        updatedCharacter.Name,
			Server:      updatedCharacter.Server,
			Xinfa:       updatedCharacter.Xinfa,
			Remark:      updatedCharacter.Remark,
		},
	}, nil
}

// DeleteCharacter 删除角色
func (h *characterServiceHandler) DeleteCharacter(ctx context.Context, req *XiaoYangV1.DeleteCharacterRequest) (*XiaoYangV1.DeleteCharacterResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrDeleteCharacterCharacterService.Err("请求参数无效，请检查输入")
	}

	err = h.characterDao.DeleteByID(ctx, req.CharacterId)
	if err != nil {
		logger.Warn("DeleteCharacter error", logger.Err(err))
		return nil, ecode.ErrDeleteCharacterCharacterService.Err("删除角色失败: " + err.Error())
	}

	return &XiaoYangV1.DeleteCharacterResponse{Success: true}, nil
}

// GetCharacter 获取角色详情
func (h *characterServiceHandler) GetCharacter(ctx context.Context, req *XiaoYangV1.GetCharacterRequest) (*XiaoYangV1.GetCharacterResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrGetCharacterCharacterService.Err("请求参数无效，请检查输入")
	}

	character, err := h.characterDao.GetByID(ctx, req.CharacterId)
	if err != nil {
		logger.Warn("GetCharacter error", logger.Err(err))
		return nil, ecode.ErrGetCharacterCharacterService.Err("获取角色详情失败: " + err.Error())
	}

	return &XiaoYangV1.GetCharacterResponse{
		CharacterInfo: &XiaoYangV1.CharacterInfo{
			CharacterId: character.ID,
			UserId:      uint64(character.UserID),
			Name:        character.Name,
			Server:      character.Server,
			Xinfa:       character.Xinfa,
			Remark:      character.Remark,
		},
	}, nil
}

// ListUserCharacters 列出用户所有角色
func (h *characterServiceHandler) ListUserCharacters(ctx context.Context, req *XiaoYangV1.ListUserCharactersRequest) (*XiaoYangV1.ListUserCharactersResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrListUserCharactersCharacterService.Err("请求参数无效，请检查输入")
	}

	params := &query.Params{
		Columns: []query.Column{
			{Name: "user_id",
				Exp:   query.Eq,
				Value: req.UserId},
		},
	}

	characters, _, err := h.characterDao.GetByColumns(ctx, params)
	if err != nil {
		logger.Warn("ListUserCharacters error", logger.Err(err))
		return nil, ecode.ErrListUserCharactersCharacterService.Err("获取用户角色列表失败: " + err.Error())
	}

	characterInfos := make([]*XiaoYangV1.CharacterInfo, len(characters))
	for i, character := range characters {
		characterInfos[i] = &XiaoYangV1.CharacterInfo{
			CharacterId: character.ID,
			UserId:      uint64(character.UserID),
			Name:        character.Name,
			Server:      character.Server,
			Xinfa:       character.Xinfa,
			Remark:      character.Remark,
		}
	}

	return &XiaoYangV1.ListUserCharactersResponse{Characters: characterInfos}, nil
}

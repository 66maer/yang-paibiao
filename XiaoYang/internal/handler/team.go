// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"
	"time"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	XiaoYangV1 "XiaoYang/api/XiaoYang/v1"
	"XiaoYang/internal/cache"
	"XiaoYang/internal/dao"
	"XiaoYang/internal/database"
	"XiaoYang/internal/ecode"
	"XiaoYang/internal/model"
	"XiaoYang/internal/utils"

	"github.com/go-dev-frame/sponge/pkg/logger"
	"github.com/go-dev-frame/sponge/pkg/sgorm/query"
)

var _ XiaoYangV1.TeamServiceLogicer = (*teamServiceHandler)(nil)

type teamServiceHandler struct {
	userDao         dao.UsersDao
	teamServiceDao  dao.TeamsDao
	teamTemplateDao dao.TeamTemplatesDao
}

// NewTeamServiceHandler create a handler
func NewTeamServiceHandler() XiaoYangV1.TeamServiceLogicer {
	return &teamServiceHandler{
		userDao: dao.NewUsersDao(
			database.GetDB(),
			cache.NewUsersCache(database.GetCacheType()),
		),
		teamServiceDao: dao.NewTeamsDao(
			database.GetDB(),
			cache.NewTeamsCache(database.GetCacheType()),
		),
		teamTemplateDao: dao.NewTeamTemplatesDao(
			database.GetDB(),
			cache.NewTeamTemplatesCache(database.GetCacheType()),
		),
	}
}

// CreateTeam 开团
func (h *teamServiceHandler) CreateTeam(ctx context.Context, req *XiaoYangV1.CreateTeamRequest) (*XiaoYangV1.CreateTeamResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrCreateTeamTeamService.Err("请求参数无效: " + err.Error())
	}

	data := &model.Teams{
		GuildID:      int(req.GuildId),
		CreaterID:    int(req.CreaterId),
		Title:        req.Title,
		Dungeons:     req.Dungeons,
		BookXuanjing: req.BookXuanjing,
		BookYuntie:   req.BookYuntie,
		IsHidden:     req.IsHidden,
		IsLock:       req.IsLock,
		Rule:         utils.StringToJSONPtr(req.Rule),
		Notice:       req.Notice,
		TeamTime:     utils.ISO8601ToTimePtr(req.TeamTime),
		CreateTime:   utils.CurrentTimePtr(),
		UpdateTime:   utils.CurrentTimePtr(),
	}

	err = h.teamServiceDao.Create(ctx, data)
	if err != nil {
		logger.Warn("CreateTeam error", logger.Err(err))
		return nil, ecode.ErrCreateTeamTeamService.Err("创建团队失败: " + err.Error())
	}

	return &XiaoYangV1.CreateTeamResponse{
		TeamId: data.ID,
	}, nil
}

// CloseTeam 关闭团队
func (h *teamServiceHandler) CloseTeam(ctx context.Context, req *XiaoYangV1.CloseTeamRequest) (*XiaoYangV1.CloseTeamResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrCloseTeamTeamService.Err("请求参数无效: " + err.Error())
	}

	data, err := h.teamServiceDao.GetByID(ctx, req.TeamId)
	if err != nil {
		logger.Warn("GetByID error", logger.Err(err))
		return nil, ecode.ErrCloseTeamTeamService.Err("获取团队信息失败: " + err.Error())
	}

	data.CloseID = int(req.CloseId)
	data.CloseTime = utils.CurrentTimePtr()
	data.UpdateTime = utils.CurrentTimePtr()
	data.Summary = utils.StringToJSONPtr(req.Summary)

	err = h.teamServiceDao.UpdateByID(ctx, data)
	if err != nil {
		logger.Warn("UpdateByID error", logger.Err(err))
		return nil, ecode.ErrCloseTeamTeamService.Err("关闭团队失败: " + err.Error())
	}

	return &XiaoYangV1.CloseTeamResponse{Success: true}, nil
}

// UpdateTeam 修改开团信息
func (h *teamServiceHandler) UpdateTeam(ctx context.Context, req *XiaoYangV1.UpdateTeamRequest) (*XiaoYangV1.UpdateTeamResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrUpdateTeamTeamService.Err("请求参数无效: " + err.Error())
	}

	data, err := h.teamServiceDao.GetByID(ctx, req.TeamId)
	if err != nil {
		logger.Warn("GetByID error", logger.Err(err))
		return nil, ecode.ErrUpdateTeamTeamService.Err("获取团队信息失败: " + err.Error())
	}

	// 更新字段
	data.Title = req.Title
	data.Dungeons = req.Dungeons
	data.BookXuanjing = req.BookXuanjing
	data.BookYuntie = req.BookYuntie
	data.IsHidden = req.IsHidden
	data.IsLock = req.IsLock
	data.Rule = utils.StringToJSONPtr(req.Rule)
	data.Notice = req.Notice
	data.TeamTime = utils.ISO8601ToTimePtr(req.TeamTime)
	data.UpdateTime = utils.CurrentTimePtr()

	err = h.teamServiceDao.UpdateByID(ctx, data)
	if err != nil {
		logger.Warn("UpdateByID error", logger.Err(err))
		return nil, ecode.ErrUpdateTeamTeamService.Err("更新团队信息失败: " + err.Error())
	}

	return &XiaoYangV1.UpdateTeamResponse{Success: true}, nil
}

// CreateTemplate 新增模板
func (h *teamServiceHandler) CreateTemplate(ctx context.Context, req *XiaoYangV1.CreateTemplateRequest) (*XiaoYangV1.CreateTemplateResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrCreateTemplateTeamService.Err("请求参数无效: " + err.Error())
	}

	data := &model.TeamTemplates{
		GuildID:   int(req.GuildId),
		CreaterID: int(req.CreaterId),
		Title:     req.Title,
		Rule:      utils.StringToJSONPtr(req.Rule),
		Notice:    req.Notice,
	}

	err = h.teamTemplateDao.Create(ctx, data)
	if err != nil {
		logger.Warn("CreateTemplate error", logger.Err(err))
		return nil, ecode.ErrCreateTemplateTeamService.Err("创建模板失败: " + err.Error())
	}

	return &XiaoYangV1.CreateTemplateResponse{
		TemplateId: data.ID,
	}, nil
}

// DeleteTemplate 删除模板
func (h *teamServiceHandler) DeleteTemplate(ctx context.Context, req *XiaoYangV1.DeleteTemplateRequest) (*XiaoYangV1.DeleteTemplateResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrDeleteTemplateTeamService.Err("请求参数无效: " + err.Error())
	}

	err = h.teamTemplateDao.DeleteByID(ctx, req.TemplateId)
	if err != nil {
		logger.Warn("DeleteTemplate error", logger.Err(err))
		return nil, ecode.ErrDeleteTemplateTeamService.Err("删除模板失败: " + err.Error())
	}

	return &XiaoYangV1.DeleteTemplateResponse{Success: true}, nil
}

// UpdateTemplate 修改模板
func (h *teamServiceHandler) UpdateTemplate(ctx context.Context, req *XiaoYangV1.UpdateTemplateRequest) (*XiaoYangV1.UpdateTemplateResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrUpdateTemplateTeamService.Err("请求参数无效: " + err.Error())
	}

	data, err := h.teamTemplateDao.GetByID(ctx, req.TemplateId)
	if err != nil {
		logger.Warn("GetTemplateByID error", logger.Err(err))
		return nil, ecode.ErrUpdateTemplateTeamService.Err("获取模板信息失败: " + err.Error())
	}

	// 更新字段
	data.Title = req.Title
	data.Rule = utils.StringToJSONPtr(req.Rule)
	data.Notice = req.Notice

	err = h.teamTemplateDao.UpdateByID(ctx, data)
	if err != nil {
		logger.Warn("UpdateTemplateByID error", logger.Err(err))
		return nil, ecode.ErrUpdateTemplateTeamService.Err("更新模板信息失败: " + err.Error())
	}

	return &XiaoYangV1.UpdateTemplateResponse{Success: true}, nil
}

// GetTeam 获取开团信息
func (h *teamServiceHandler) GetTeam(ctx context.Context, req *XiaoYangV1.GetTeamRequest) (*XiaoYangV1.GetTeamResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrGetTeamTeamService.Err("请求参数无效: " + err.Error())
	}

	data, err := h.teamServiceDao.GetByID(ctx, req.TeamId)
	if err != nil {
		logger.Warn("GetByID error", logger.Err(err))
		return nil, ecode.ErrGetTeamTeamService.Err("获取团队信息失败: " + err.Error())
	}

	createrNickname, closeNickname, err := h.getNicknames(ctx, data.CreaterID, data.CloseID, data.CloseTime)
	if err != nil {
		return nil, ecode.ErrGetTeamTeamService.Err("获取用户信息失败: " + err.Error())
	}

	return &XiaoYangV1.GetTeamResponse{
		TeamInfo: &XiaoYangV1.TeamInfo{
			TeamId:          data.ID,
			GuildId:         uint64(data.GuildID),
			CreaterId:       uint64(data.CreaterID),
			CreaterNickname: createrNickname,
			Title:           data.Title,
			Dungeons:        data.Dungeons,
			BookXuanjing:    data.BookXuanjing,
			BookYuntie:      data.BookYuntie,
			IsHidden:        data.IsHidden,
			IsLock:          data.IsLock,
			Rule:            utils.JSONPtrToString(data.Rule),
			Notice:          data.Notice,
			Summary:         utils.JSONPtrToString(data.Summary),
			TeamTime:        utils.TimePtrToISO8601(data.TeamTime),
			CreateTime:      utils.TimePtrToISO8601(data.CreateTime),
			UpdateTime:      utils.TimePtrToISO8601(data.UpdateTime),
			CloseTime:       utils.TimePtrToISO8601(data.CloseTime),
			CloseId:         uint64(data.CloseID),
			CloseNickname:   closeNickname,
		},
	}, nil
}

// ListTeams 获取所有开团信息
func (h *teamServiceHandler) ListTeams(ctx context.Context, req *XiaoYangV1.ListTeamsRequest) (*XiaoYangV1.ListTeamsResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrListTeamsTeamService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "guild_id",
				Value: req.GuildId,
			},
		},
		Page:  int(req.Page),
		Limit: int(req.PageSize),
	}

	if req.Filter == "only_open" {
		params.Columns = append(params.Columns, query.Column{
			Name: "close_time",
			Exp:  query.IsNull,
		})
	} else if req.Filter == "only_close" {
		params.Columns = append(params.Columns, query.Column{
			Name: "close_time",
			Exp:  query.IsNotNull,
		})
	}

	data, _, err := h.teamServiceDao.GetByColumns(ctx, params)
	if err != nil {
		logger.Warn("GetByColumns error", logger.Err(err))
		return nil, ecode.ErrListTeamsTeamService.Err("获取团队列表失败: " + err.Error())
	}

	teams := make([]*XiaoYangV1.TeamInfo, len(data))
	for i, team := range data {
		createrNickname, closeNickname, err := h.getNicknames(ctx, team.CreaterID, team.CloseID, team.CloseTime)
		if err != nil {
			return nil, ecode.ErrListTeamsTeamService.Err("获取用户信息失败: " + err.Error())
		}

		teams[i] = &XiaoYangV1.TeamInfo{
			TeamId:          team.ID,
			GuildId:         uint64(team.GuildID),
			CreaterId:       uint64(team.CreaterID),
			CreaterNickname: createrNickname,
			Title:           team.Title,
			Dungeons:        team.Dungeons,
			BookXuanjing:    team.BookXuanjing,
			BookYuntie:      team.BookYuntie,
			IsHidden:        team.IsHidden,
			IsLock:          team.IsLock,
			Rule:            utils.JSONPtrToString(team.Rule),
			Notice:          team.Notice,
			Summary:         utils.JSONPtrToString(team.Summary),
			TeamTime:        utils.TimePtrToISO8601(team.TeamTime),
			CreateTime:      utils.TimePtrToISO8601(team.CreateTime),
			UpdateTime:      utils.TimePtrToISO8601(team.UpdateTime),
			CloseTime:       utils.TimePtrToISO8601(team.CloseTime),
			CloseId:         uint64(team.CloseID),
			CloseNickname:   closeNickname,
		}
	}

	return &XiaoYangV1.ListTeamsResponse{Teams: teams}, nil
}

// GetTemplate 获取模板信息
func (h *teamServiceHandler) GetTemplate(ctx context.Context, req *XiaoYangV1.GetTemplateRequest) (*XiaoYangV1.GetTemplateResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrGetTemplateTeamService.Err("请求参数无效: " + err.Error())
	}

	data, err := h.teamTemplateDao.GetByID(ctx, req.TemplateId)
	if err != nil {
		logger.Warn("GetTemplateByID error", logger.Err(err))
		return nil, ecode.ErrGetTemplateTeamService.Err("获取模板信息失败: " + err.Error())
	}

	return &XiaoYangV1.GetTemplateResponse{
		TemplateInfo: &XiaoYangV1.TemplateInfo{
			TemplateId: data.ID,
			GuildId:    uint64(data.GuildID),
			CreaterId:  uint64(data.CreaterID),
			Title:      data.Title,
			Rule:       utils.JSONPtrToString(data.Rule),
			Notice:     data.Notice,
		},
	}, nil
}

// ListTemplates 获取所有模板信息
func (h *teamServiceHandler) ListTemplates(ctx context.Context, req *XiaoYangV1.ListTemplatesRequest) (*XiaoYangV1.ListTemplatesResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrListTemplatesTeamService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "guild_id",
				Value: req.GuildId,
			},
		},
		Page:  0,
		Limit: 99999,
	}

	data, _, err := h.teamTemplateDao.GetByColumns(ctx, params)
	if err != nil {
		logger.Warn("GetByColumns error", logger.Err(err))
		return nil, ecode.ErrListTemplatesTeamService.Err("获取模板列表失败: " + err.Error())
	}

	templates := make([]*XiaoYangV1.TemplateInfo, len(data))
	for i, template := range data {
		templates[i] = &XiaoYangV1.TemplateInfo{
			TemplateId: template.ID,
			GuildId:    uint64(template.GuildID),
			CreaterId:  uint64(template.CreaterID),
			Title:      template.Title,
			Rule:       utils.JSONPtrToString(template.Rule),
			Notice:     template.Notice,
		}
	}

	return &XiaoYangV1.ListTemplatesResponse{Templates: templates}, nil
}

func (h *teamServiceHandler) getNicknames(ctx context.Context, createrID, closeID int, closeTime *time.Time) (string, string, error) {
	createrUserInfo, err := h.userDao.GetByID(ctx, uint64(createrID))
	if err != nil {
		logger.Warn("GetUserByID error", logger.Err(err))
		return "", "", err
	}

	createrNickname := ""
	if createrUserInfo != nil {
		createrNickname = createrUserInfo.Nickname
	}

	closeNickname := ""
	if closeTime != nil {
		closeUserInfo, err := h.userDao.GetByID(ctx, uint64(closeID))
		if err != nil {
			logger.Warn("GetUserByID error", logger.Err(err))
			return "", "", err
		}
		if closeUserInfo != nil {
			closeNickname = closeUserInfo.Nickname
		}
	}

	return createrNickname, closeNickname, nil
}

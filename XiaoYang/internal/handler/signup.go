// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"

	XiaoYangV1 "XiaoYang/api/XiaoYang/v1"
	"XiaoYang/internal/cache"
	"XiaoYang/internal/dao"
	"XiaoYang/internal/database"
	"XiaoYang/internal/ecode"
	"XiaoYang/internal/model"
	"XiaoYang/internal/utils"

	"github.com/go-dev-frame/sponge/pkg/logger"
	"github.com/go-dev-frame/sponge/pkg/sgorm/query"
)

var _ XiaoYangV1.SignupServiceLogicer = (*signupServiceHandler)(nil)

type signupServiceHandler struct {
	signupDao dao.SignupsDao
}

// NewSignupServiceHandler create a handler
func NewSignupServiceHandler() XiaoYangV1.SignupServiceLogicer {
	return &signupServiceHandler{
		signupDao: dao.NewSignupsDao(
			database.GetDB(),
			cache.NewSignupsCache(database.GetCacheType()),
		),
	}
}

// CreateSignup 报名
func (h *signupServiceHandler) CreateSignup(ctx context.Context, req *XiaoYangV1.CreateSignupRequest) (*XiaoYangV1.CreateSignupResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrCreateSignupSignupService.Err("请求参数无效: " + err.Error())
	}

	data := &model.Signups{
		TeamID:            int(req.TeamId),
		SubmitUserID:      int(req.SubmitUserId),
		SignupUserID:      int(req.SignupUserId),
		SignupCharacterID: int(req.SignupCharacterId),
		SignupInfo:        utils.StringToJSONPtr(req.SignupInfo),
		Priority:          int(req.Priority),
		IsRich:            req.IsRich,
		IsProxy:           req.IsProxy,
		ClientType:        req.ClientType,
		LockSlot:          int(req.LockSlot),
		SignupTime:        utils.CurrentTimePtr(),
	}

	err = h.signupDao.Create(ctx, data)
	if err != nil {
		logger.Warn("CreateSignup error", logger.Err(err))
		return nil, ecode.ErrCreateSignupSignupService.Err("创建报名失败: " + err.Error())
	}

	return &XiaoYangV1.CreateSignupResponse{
		Success: true,
	}, nil
}

// CancelSignup 取消报名
func (h *signupServiceHandler) CancelSignup(ctx context.Context, req *XiaoYangV1.CancelSignupRequest) (*XiaoYangV1.CancelSignupResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrCancelSignupSignupService.Err("请求参数无效: " + err.Error())
	}

	data, err := h.signupDao.GetByID(ctx, req.SignupId)
	if err != nil {
		logger.Warn("GetByID error", logger.Err(err))
		return nil, ecode.ErrCancelSignupSignupService.Err("获取报名信息失败: " + err.Error())
	}

	data.CancelUserID = int(req.CancelUserId)
	data.CancelTime = utils.CurrentTimePtr()

	err = h.signupDao.UpdateByID(ctx, data)
	if err != nil {
		logger.Warn("UpdateByID error", logger.Err(err))
		return nil, ecode.ErrCancelSignupSignupService.Err("取消报名失败: " + err.Error())
	}

	return &XiaoYangV1.CancelSignupResponse{Success: true}, nil
}

// GetSignupsByTeam 根据teamId获取报名信息
func (h *signupServiceHandler) GetSignupsByTeam(ctx context.Context, req *XiaoYangV1.GetSignupsByTeamRequest) (*XiaoYangV1.GetSignupsByTeamResponse, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err))
		return nil, ecode.ErrGetSignupsByTeamSignupService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "team_id",
				Exp:   query.Eq,
				Value: req.TeamId,
			},
		},
	}

	data, _, err := h.signupDao.GetByColumns(ctx, params)
	if err != nil {
		logger.Warn("GetByColumns error", logger.Err(err))
		return nil, ecode.ErrGetSignupsByTeamSignupService.Err("获取报名信息失败: " + err.Error())
	}

	signups := make([]*XiaoYangV1.SignupInfo, len(data))
	for i, signup := range data {
		signups[i] = &XiaoYangV1.SignupInfo{
			SignupId:          uint64(signup.ID),
			TeamId:            uint64(signup.TeamID),
			SubmitUserId:      uint64(signup.SubmitUserID),
			SignupUserId:      uint64(signup.SignupUserID),
			SignupCharacterId: uint64(signup.SignupCharacterID),
			SignupInfo:        utils.JSONPtrToString(signup.SignupInfo),
			Priority:          int32(signup.Priority),
			IsRich:            signup.IsRich,
			IsProxy:           signup.IsProxy,
			ClientType:        signup.ClientType,
			LockSlot:          int32(signup.LockSlot),
			SignupTime:        utils.TimePtrToISO8601(signup.SignupTime),
			CancelUserId:      uint64(signup.CancelUserID),
			CancelTime:        utils.TimePtrToISO8601(signup.CancelTime),
		}
	}

	return &XiaoYangV1.GetSignupsByTeamResponse{Signups: signups}, nil
}

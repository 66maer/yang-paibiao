// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"
	"time"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	XiaoYangV1 "XiaoYang/api/XiaoYang/v1"
	"XiaoYang/internal/cache"
	"XiaoYang/internal/dao"
	"XiaoYang/internal/database"
	"XiaoYang/internal/ecode"
	"XiaoYang/internal/model"

	"github.com/go-dev-frame/sponge/pkg/sgorm/query"
	"gorm.io/datatypes"
)

var _ XiaoYangV1.GuildServiceLogicer = (*guildServiceHandler)(nil)

type guildServiceHandler struct {
	userDao        dao.UsersDao
	guildDao       dao.GuildsDao
	guildMemberDao dao.GuildMembersDao
}

// NewGuildServiceHandler create a handler
func NewGuildServiceHandler() XiaoYangV1.GuildServiceLogicer {
	return &guildServiceHandler{
		userDao: dao.NewUsersDao(
			database.GetDB(),
			cache.NewUsersCache(database.GetCacheType()),
		),
		guildDao: dao.NewGuildsDao(
			database.GetDB(),
			cache.NewGuildsCache(database.GetCacheType()),
		),
		guildMemberDao: dao.NewGuildMembersDao(
			database.GetDB(),
			cache.NewGuildMembersCache(database.GetCacheType()),
		),
	}
}

// ConvertToTimePtr 将 uint64 转换为 *time.Time
func ConvertToTimePtr(t uint64) *time.Time {
	if t == 0 {
		return nil
	}
	tt := time.Unix(int64(t), 0)
	return &tt
}

// ConvertToJSONPtr 将 string 转换为 *datatypes.JSON
func ConvertToJSONPtr(s string) *datatypes.JSON {
	if s == "" {
		return nil
	}
	j := datatypes.JSON([]byte(s))
	return &j
}

// CreateGuild 创建群组
func (h *guildServiceHandler) CreateGuild(ctx context.Context, req *XiaoYangV1.CreateGuildRequest) (*XiaoYangV1.CreateGuildResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrCreateGuildGuildService.Err("请求参数无效: " + err.Error())
	}

	guild := &model.Guilds{
		GuildQqNumber: req.GuildQqNumber,
		Ukey:          req.Ukey,
		Name:          req.Name,
		Server:        req.Server,
		Avatar:        req.Avatar,
	}
	guild.SetExpireTime(req.ExpireTime)
	guild.SetPreferences(req.Preferences)

	err = h.guildDao.Create(ctx, guild)
	if err != nil {
		return nil, ecode.ErrCreateGuildGuildService.Err("创建群组失败: " + err.Error())
	}

	return &XiaoYangV1.CreateGuildResponse{
		GuildInfo: &XiaoYangV1.GuildInfo{
			GuildId:       guild.ID,
			GuildQqNumber: guild.GuildQqNumber,
			Ukey:          guild.Ukey,
			Name:          guild.Name,
			Server:        guild.Server,
			Avatar:        guild.Avatar,
			ExpireTime:    guild.GetExpireTime(),
			Preferences:   guild.GetPreferences(),
		},
	}, nil
}

// DeleteGuild 删除群组
func (h *guildServiceHandler) DeleteGuild(ctx context.Context, req *XiaoYangV1.DeleteGuildRequest) (*XiaoYangV1.DeleteGuildResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrDeleteGuildGuildService.Err("请求参数无效: " + err.Error())
	}

	err = h.guildDao.DeleteByID(ctx, req.GuildId)
	if err != nil {
		return nil, ecode.ErrDeleteGuildGuildService.Err("删除群组失败: " + err.Error())
	}

	return &XiaoYangV1.DeleteGuildResponse{
		Success: true,
	}, nil
}

// UpdateGuildInfo 更新群组信息
func (h *guildServiceHandler) UpdateGuildInfo(ctx context.Context, req *XiaoYangV1.UpdateGuildInfoRequest) (*XiaoYangV1.UpdateGuildInfoResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrUpdateGuildInfoGuildService.Err("请求参数无效: " + err.Error())
	}

	guild := &model.Guilds{
		ID:     req.GuildId,
		Ukey:   req.Ukey,
		Name:   req.Name,
		Server: req.Server,
		Avatar: req.Avatar,
	}
	guild.SetExpireTime(req.ExpireTime)
	guild.SetPreferences(req.Preferences)

	err = h.guildDao.UpdateByID(ctx, guild)
	if err != nil {
		return nil, ecode.ErrUpdateGuildInfoGuildService.Err("更新群组信息失败: " + err.Error())
	}

	return &XiaoYangV1.UpdateGuildInfoResponse{
		GuildInfo: &XiaoYangV1.GuildInfo{
			GuildId:       guild.ID,
			GuildQqNumber: guild.GuildQqNumber,
			Ukey:          guild.Ukey,
			Name:          guild.Name,
			Server:        guild.Server,
			Avatar:        guild.Avatar,
			ExpireTime:    guild.GetExpireTime(),
			Preferences:   guild.GetPreferences(),
		},
	}, nil
}

// GetGuildInfo 获取群组信息
func (h *guildServiceHandler) GetGuildInfo(ctx context.Context, req *XiaoYangV1.GetGuildInfoRequest) (*XiaoYangV1.GetGuildInfoResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrGetGuildInfoGuildService.Err("请求参数无效: " + err.Error())
	}

	guild, err := h.guildDao.GetByID(ctx, req.GuildId)
	if err != nil {
		return nil, ecode.ErrGetGuildInfoGuildService.Err("获取群组信息失败: " + err.Error())
	}

	return &XiaoYangV1.GetGuildInfoResponse{
		GuildInfo: &XiaoYangV1.GuildInfo{
			GuildId:       guild.ID,
			GuildQqNumber: guild.GuildQqNumber,
			Ukey:          guild.Ukey,
			Name:          guild.Name,
			Server:        guild.Server,
			Avatar:        guild.Avatar,
			ExpireTime:    guild.GetExpireTime(),
			Preferences:   guild.GetPreferences(),
		},
	}, nil
}

// ListAllGuilds 获取所有群组
func (h *guildServiceHandler) ListAllGuilds(ctx context.Context, req *XiaoYangV1.ListAllGuildsRequest) (*XiaoYangV1.ListAllGuildsResponse, error) {

	params := &query.Params{
		Page:  0,     //req.Page,
		Limit: 99999, //req.Limit,
	}

	guilds, _, err := h.guildDao.GetByColumns(ctx, params)
	if err != nil {
		return nil, ecode.ErrListAllGuildsGuildService.Err("获取所有群组失败: " + err.Error())
	}

	guildInfos := make([]*XiaoYangV1.GuildInfo, len(guilds))
	for i, guild := range guilds {
		guildInfos[i] = &XiaoYangV1.GuildInfo{
			GuildId:       guild.ID,
			GuildQqNumber: guild.GuildQqNumber,
			Ukey:          guild.Ukey,
			Name:          guild.Name,
			Server:        guild.Server,
			Avatar:        guild.Avatar,
			ExpireTime:    guild.GetExpireTime(),
			Preferences:   guild.GetPreferences(),
		}
	}

	return &XiaoYangV1.ListAllGuildsResponse{
		Guilds: guildInfos,
	}, nil
}

// ListUserGuilds 获取用户所在群组
func (h *guildServiceHandler) ListUserGuilds(ctx context.Context, req *XiaoYangV1.ListUserGuildsRequest) (*XiaoYangV1.ListUserGuildsResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrListUserGuildsGuildService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "member_id",
				Value: req.UserId,
			},
		},
		Page:  0,
		Limit: 99999,
	}

	guilds, _, err := h.guildMemberDao.GetByColumns(ctx, params)
	if err != nil {
		return nil, ecode.ErrListUserGuildsGuildService.Err("获取用户所在群组失败: " + err.Error())
	}

	guildInfos := make([]*XiaoYangV1.GuildInfo, len(guilds))
	for i, guildMember := range guilds {
		guild, err := h.guildDao.GetByID(ctx, uint64(guildMember.GuildID))
		if err != nil {
			return nil, ecode.ErrListUserGuildsGuildService.Err("获取群组信息失败: " + err.Error())
		}
		guildInfos[i] = &XiaoYangV1.GuildInfo{
			GuildId:       uint64(guild.ID),
			GuildQqNumber: guild.GuildQqNumber,
			Ukey:          guild.Ukey,
			Name:          guild.Name,
			Server:        guild.Server,
			Avatar:        guild.Avatar,
			ExpireTime:    guild.GetExpireTime(),
			Preferences:   guild.GetPreferences(),
		}
	}

	return &XiaoYangV1.ListUserGuildsResponse{
		Guilds: guildInfos,
	}, nil
}

// ListGuildMembers 获取群组全部成员
func (h *guildServiceHandler) ListGuildMembers(ctx context.Context, req *XiaoYangV1.ListGuildMembersRequest) (*XiaoYangV1.ListGuildMembersResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrListGuildMembersGuildService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "guild_id",
				Value: req.GuildId,
			},
		},
		Page:  0,
		Limit: 99999,
	}

	members, _, err := h.guildMemberDao.GetByColumns(ctx, params)
	if err != nil {
		return nil, ecode.ErrListGuildMembersGuildService.Err("获取群组成员失败: " + err.Error())
	}

	memberInfos := make([]*XiaoYangV1.GuildMemberInfo, len(members))
	for i, member := range members {
		user, err := h.userDao.GetByID(ctx, uint64(member.MemberID))
		if err != nil {
			return nil, ecode.ErrListGuildMembersGuildService.Err("获取用户信息失败: " + err.Error())
		}
		memberInfos[i] = &XiaoYangV1.GuildMemberInfo{
			UserId:        uint64(member.MemberID),
			QqNumber:      user.QqNumber,
			Nickname:      user.Nickname,
			GroupRole:     member.Role,
			GroupNickname: member.GroupNickname,
		}
	}

	return &XiaoYangV1.ListGuildMembersResponse{
		Members: memberInfos,
	}, nil
}

// AddGuildMember 添加群组成员
func (h *guildServiceHandler) AddGuildMember(ctx context.Context, req *XiaoYangV1.AddGuildMemberRequest) (*XiaoYangV1.AddGuildMemberResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrAddGuildMemberGuildService.Err("请求参数无效: " + err.Error())
	}

	// Fetch user information using userDao
	user, err := h.userDao.GetByID(ctx, req.UserId)
	if err != nil {
		return nil, ecode.ErrAddGuildMemberGuildService.Err("获取用户信息失败: " + err.Error())
	}

	member := &model.GuildMembers{
		GuildID:       int(req.GuildId),
		MemberID:      int(req.UserId),
		Role:          req.Role,
		GroupNickname: req.GroupNickname,
	}

	err = h.guildMemberDao.Create(ctx, member)
	if err != nil {
		return nil, ecode.ErrAddGuildMemberGuildService.Err("添加群组成员失败: " + err.Error())
	}

	return &XiaoYangV1.AddGuildMemberResponse{
		MemberInfo: &XiaoYangV1.GuildMemberInfo{
			UserId:        uint64(member.MemberID),
			QqNumber:      user.QqNumber,
			GroupRole:     member.Role,
			GroupNickname: member.GroupNickname,
			Nickname:      user.Nickname,
		},
	}, nil
}

// RemoveGuildMember 移除群组成员
func (h *guildServiceHandler) RemoveGuildMember(ctx context.Context, req *XiaoYangV1.RemoveGuildMemberRequest) (*XiaoYangV1.RemoveGuildMemberResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrRemoveGuildMemberGuildService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "guild_id",
				Value: req.GuildId,
			},
			{
				Name:  "member_id",
				Value: req.UserId,
			},
		},
	}

	members, _, err := h.guildMemberDao.GetByColumns(ctx, params)
	if err != nil || len(members) == 0 {
		return nil, ecode.ErrRemoveGuildMemberGuildService.Err("成员不存在: " + err.Error())
	}

	err = h.guildMemberDao.DeleteByID(ctx, members[0].ID)
	if err != nil {
		return nil, ecode.ErrRemoveGuildMemberGuildService.Err("移除群组成员失败: " + err.Error())
	}

	return &XiaoYangV1.RemoveGuildMemberResponse{
		Success: true,
	}, nil
}

// UpdateGuildMember 更新成员信息
func (h *guildServiceHandler) UpdateGuildMember(ctx context.Context, req *XiaoYangV1.UpdateGuildMemberRequest) (*XiaoYangV1.UpdateGuildMemberResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrUpdateGuildMemberGuildService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "guild_id",
				Value: req.GuildId,
			},
			{
				Name:  "member_id",
				Value: req.UserId,
			},
		},
	}

	members, _, err := h.guildMemberDao.GetByColumns(ctx, params)
	if err != nil || len(members) == 0 {
		return nil, ecode.ErrUpdateGuildMemberGuildService.Err("成员不存在: " + err.Error())
	}

	member := members[0]
	if req.Role != "" {
		member.Role = req.Role
	}
	if req.GroupNickname != "" {
		member.GroupNickname = req.GroupNickname
	}

	err = h.guildMemberDao.UpdateByID(ctx, member)
	if err != nil {
		return nil, ecode.ErrUpdateGuildMemberGuildService.Err("更新成员信息失败: " + err.Error())
	}

	return &XiaoYangV1.UpdateGuildMemberResponse{
		MemberInfo: &XiaoYangV1.GuildMemberInfo{
			UserId:        uint64(member.MemberID),
			GroupRole:     member.Role,
			GroupNickname: member.GroupNickname,
		},
	}, nil
}

// GetGuildMember 获取成员信息
func (h *guildServiceHandler) GetGuildMember(ctx context.Context, req *XiaoYangV1.GetGuildMemberRequest) (*XiaoYangV1.GetGuildMemberResponse, error) {
	err := req.Validate()
	if err != nil {
		return nil, ecode.ErrGetGuildMemberGuildService.Err("请求参数无效: " + err.Error())
	}

	params := &query.Params{
		Columns: []query.Column{
			{
				Name:  "guild_id",
				Value: req.GuildId,
			},
			{
				Name:  "member_id",
				Value: req.UserId,
			},
		},
	}

	members, _, err := h.guildMemberDao.GetByColumns(ctx, params)
	if err != nil || len(members) == 0 {
		return nil, ecode.ErrGetGuildMemberGuildService.Err("成员不存在: " + err.Error())
	}

	member := members[0]
	user, err := h.userDao.GetByID(ctx, uint64(member.MemberID))
	if err != nil {
		return nil, ecode.ErrGetGuildMemberGuildService.Err("获取用户信息失败: " + err.Error())
	}

	return &XiaoYangV1.GetGuildMemberResponse{
		MemberInfo: &XiaoYangV1.GuildMemberInfo{
			UserId:        uint64(member.MemberID),
			QqNumber:      user.QqNumber,
			GroupRole:     member.Role,
			GroupNickname: member.GroupNickname,
			Nickname:      user.Nickname,
		},
	}, nil
}

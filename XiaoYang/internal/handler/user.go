// Code generated by https://github.com/go-dev-frame/sponge

package handler

import (
	"context"

	//"github.com/go-dev-frame/sponge/pkg/gin/middleware"

	XiaoYangV1 "XiaoYang/api/XiaoYang/v1"
	"XiaoYang/internal/cache"
	"XiaoYang/internal/dao"
	"XiaoYang/internal/database"
	"XiaoYang/internal/ecode"
	"XiaoYang/internal/model"

	"github.com/go-dev-frame/sponge/pkg/gin/middleware"
	"github.com/go-dev-frame/sponge/pkg/gocrypto"
	"github.com/go-dev-frame/sponge/pkg/jwt"
	"github.com/go-dev-frame/sponge/pkg/logger"
)

var _ XiaoYangV1.UserServiceLogicer = (*userServiceHandler)(nil)

type userServiceHandler struct {
	userDao dao.UsersDao
}

// NewUserServiceHandler create a handler
func NewUserServiceHandler() XiaoYangV1.UserServiceLogicer {
	return &userServiceHandler{
		userDao: dao.NewUsersDao(
			database.GetDB(),
			cache.NewUsersCache(database.GetCacheType()),
		),
	}
}

// Register 注册
func (h *userServiceHandler) Register(ctx context.Context, req *XiaoYangV1.RegisterRequest) (*XiaoYangV1.RegisterResponse, error) {
	// 参数基础校验
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 将密码加密
	pswd, err := gocrypto.HashAndSaltPassword(req.Password)
	if err != nil {
		logger.Warn("HashAndSaltPassword error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建用户对象
	data := &model.Users{}
	data.QqNumber = req.QqNumber
	data.Password = pswd
	data.Nickname = req.Nickname

	// 创建用户的数据库记录
	err = h.userDao.Create(ctx, data)
	if err != nil {
		logger.Warn("Register error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 生成 token
	fields := jwt.KV{
		"userId":   data.ID,
		"qqNumber": data.QqNumber,
		"nickname": data.Nickname,
		"isAdmin":  data.IsAdmin,
		"isBot":    data.IsBot,
	}
	token, err := jwt.GenerateCustomToken(fields)
	if err != nil {
		logger.Warn("GenerateToken error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 返回注册成功的响应
	return &XiaoYangV1.RegisterResponse{
		Token:    token,
		UserId:   data.ID,
		QqNumber: data.QqNumber,
		Nickname: data.Nickname,
		Avatar:   data.Avatar,
	}, nil
}

// Login 登录
func (h *userServiceHandler) Login(ctx context.Context, req *XiaoYangV1.LoginRequest) (*XiaoYangV1.LoginResponse, error) {
	// 参数基础校验
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrLoginUserService.Err(err.Error())
	}

	// 根据 QQ 号查询用户信息
	data, err := h.userDao.GetByQqNumber(ctx, req.QqNumber)
	if err != nil {
		logger.Warn("GetByQqNumber error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrLoginUserService.Err("未注册")
	}

	// 校验密码
	if !gocrypto.VerifyPassword(req.Password, data.Password) {
		logger.Warn("password error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrLoginUserService.Err("密码错误")
	}

	// 生成 token
	fields := jwt.KV{
		"userId":   data.ID,
		"qqNumber": data.QqNumber,
		"nickname": data.Nickname,
		"isAdmin":  data.IsAdmin,
		"isBot":    data.IsBot,
	}
	token, err := jwt.GenerateCustomToken(fields)
	if err != nil {
		logger.Warn("GenerateToken error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrLoginUserService.Err(err.Error())
	}

	// 返回登录成功的响应
	return &XiaoYangV1.LoginResponse{
		Token:    token,
		UserId:   data.ID,
		QqNumber: data.QqNumber,
		Nickname: data.Nickname,
		Avatar:   data.Avatar,
	}, nil
}

// Logout 登出
func (h *userServiceHandler) Logout(ctx context.Context, req *XiaoYangV1.LogoutRequest) (*XiaoYangV1.LogoutResponse, error) {
	// 不需要做任何事情，直接返回成功
	return &XiaoYangV1.LogoutResponse{}, nil
}

// GetUserInfo 获取用户信息
func (h *userServiceHandler) GetUserInfo(ctx context.Context, req *XiaoYangV1.GetUserInfoRequest) (*XiaoYangV1.GetUserInfoResponse, error) {
	// 参数基础校验
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrGetUserInfoUserService.Err(err.Error())
	}

	// 获取Token中的用户信息
	userInfo := ctx.Value("userInfo")
	if userInfo == nil {
		logger.Warn("GetUserInfo error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrGetUserInfoUserService.Err("无法获取用户信息")
	}

	userId, ok := userInfo.(*jwt.CustomClaims).GetUint64("userId")
	if !ok {
		logger.Warn("GetUserInfo error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrGetUserInfoUserService.Err("无法获取用户 ID")
	}

	data, err := h.userDao.GetByID(ctx, userId)

	if err != nil {
		logger.Warn("GetUserInfo error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrGetUserInfoUserService.Err(err.Error())
	}

	return &XiaoYangV1.GetUserInfoResponse{
		UserId:   data.ID,
		QqNumber: data.QqNumber,
		Nickname: data.Nickname,
		Avatar:   data.Avatar,
		IsAdmin:  data.IsAdmin,
	}, nil

}

// UpdateUserInfo 更新用户信息
func (h *userServiceHandler) UpdateUserInfo(ctx context.Context, req *XiaoYangV1.UpdateUserInfoRequest) (*XiaoYangV1.UpdateUserInfoResponse, error) {
	// 参数基础校验
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 根据用户 ID 查询用户信息
	data, err := h.userDao.GetByID(ctx, req.UserId)
	if err != nil {
		logger.Warn("GetByID error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrUpdateUserInfoUserService.Err("用户不存在")
	}

	// 更新用户信息
	if req.Nickname != "" {
		data.Nickname = req.Nickname
	}
	if req.Avatar != "" {
		data.Avatar = req.Avatar
	}

	err = h.userDao.UpdateByID(ctx, data)
	if err != nil {
		logger.Warn("UpdateByID error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 返回更新成功的响应
	return &XiaoYangV1.UpdateUserInfoResponse{}, nil
}

// ChangePassword 修改密码
func (h *userServiceHandler) ChangePassword(ctx context.Context, req *XiaoYangV1.ChangePasswordRequest) (*XiaoYangV1.ChangePasswordResponse, error) {
	// 参数基础校验
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 根据用户 ID 查询用户信息
	data, err := h.userDao.GetByID(ctx, req.UserId)
	if err != nil {
		logger.Warn("GetByID error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrChangePasswordUserService.Err("用户不存在")
	}

	// 校验旧密码
	if !gocrypto.VerifyPassword(req.OldPassword, data.Password) {
		logger.Warn("OldPassword error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrChangePasswordUserService.Err("旧密码错误")
	}

	// 将新密码加密
	newPassword, err := gocrypto.HashAndSaltPassword(req.NewPassword)
	if err != nil {
		logger.Warn("HashAndSaltPassword error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 更新用户密码
	data.Password = newPassword
	err = h.userDao.UpdateByID(ctx, data)
	if err != nil {
		logger.Warn("Update error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 返回修改密码成功的响应
	return &XiaoYangV1.ChangePasswordResponse{}, nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/xiaoyang/v1/team.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamRequestMultiError, or nil if none found.
func (m *CreateTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreaterId

	// no validation rules for CreaterQqNumber

	// no validation rules for LeagueId

	// no validation rules for Ukey

	// no validation rules for Title

	// no validation rules for TeamTime

	// no validation rules for DungeonName

	// no validation rules for BookXuanjing

	// no validation rules for BookYuntie

	// no validation rules for IsVisible

	// no validation rules for IsLock

	// no validation rules for Rule

	// no validation rules for Notice

	if len(errors) > 0 {
		return CreateTeamRequestMultiError(errors)
	}

	return nil
}

// CreateTeamRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamRequestMultiError) AllErrors() []error { return m }

// CreateTeamRequestValidationError is the validation error returned by
// CreateTeamRequest.Validate if the designated constraints aren't met.
type CreateTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamRequestValidationError) ErrorName() string {
	return "CreateTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamRequestValidationError{}

// Validate checks the field values on CreateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamResponseMultiError, or nil if none found.
func (m *CreateTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if len(errors) > 0 {
		return CreateTeamResponseMultiError(errors)
	}

	return nil
}

// CreateTeamResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTeamResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamResponseMultiError) AllErrors() []error { return m }

// CreateTeamResponseValidationError is the validation error returned by
// CreateTeamResponse.Validate if the designated constraints aren't met.
type CreateTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamResponseValidationError) ErrorName() string {
	return "CreateTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamResponseValidationError{}

// Validate checks the field values on TeamInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TeamInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TeamInfoMultiError, or nil
// if none found.
func (m *TeamInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for CreaterId

	// no validation rules for CreaterQqNumber

	// no validation rules for LeagueId

	// no validation rules for Ukey

	// no validation rules for Title

	// no validation rules for TeamTime

	// no validation rules for DungeonName

	// no validation rules for BookXuanjing

	// no validation rules for BookYuntie

	// no validation rules for IsVisible

	// no validation rules for IsLock

	// no validation rules for Rule

	// no validation rules for Notice

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for CloseTime

	if len(errors) > 0 {
		return TeamInfoMultiError(errors)
	}

	return nil
}

// TeamInfoMultiError is an error wrapping multiple validation errors returned
// by TeamInfo.ValidateAll() if the designated constraints aren't met.
type TeamInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamInfoMultiError) AllErrors() []error { return m }

// TeamInfoValidationError is the validation error returned by
// TeamInfo.Validate if the designated constraints aren't met.
type TeamInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamInfoValidationError) ErrorName() string { return "TeamInfoValidationError" }

// Error satisfies the builtin error interface
func (e TeamInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamInfoValidationError{}

// Validate checks the field values on ListTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamRequestMultiError, or nil if none found.
func (m *ListTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ukey

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for PageCount

	if len(errors) > 0 {
		return ListTeamRequestMultiError(errors)
	}

	return nil
}

// ListTeamRequestMultiError is an error wrapping multiple validation errors
// returned by ListTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamRequestMultiError) AllErrors() []error { return m }

// ListTeamRequestValidationError is the validation error returned by
// ListTeamRequest.Validate if the designated constraints aren't met.
type ListTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamRequestValidationError) ErrorName() string { return "ListTeamRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamRequestValidationError{}

// Validate checks the field values on ListTeamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamResponseMultiError, or nil if none found.
func (m *ListTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeamInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeamResponseValidationError{
						field:  fmt.Sprintf("TeamInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeamResponseValidationError{
						field:  fmt.Sprintf("TeamInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeamResponseValidationError{
					field:  fmt.Sprintf("TeamInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeamResponseMultiError(errors)
	}

	return nil
}

// ListTeamResponseMultiError is an error wrapping multiple validation errors
// returned by ListTeamResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamResponseMultiError) AllErrors() []error { return m }

// ListTeamResponseValidationError is the validation error returned by
// ListTeamResponse.Validate if the designated constraints aren't met.
type ListTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamResponseValidationError) ErrorName() string { return "ListTeamResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamResponseValidationError{}

// Validate checks the field values on ListActiveTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActiveTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActiveTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActiveTeamRequestMultiError, or nil if none found.
func (m *ListActiveTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActiveTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ukey

	if len(errors) > 0 {
		return ListActiveTeamRequestMultiError(errors)
	}

	return nil
}

// ListActiveTeamRequestMultiError is an error wrapping multiple validation
// errors returned by ListActiveTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type ListActiveTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActiveTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActiveTeamRequestMultiError) AllErrors() []error { return m }

// ListActiveTeamRequestValidationError is the validation error returned by
// ListActiveTeamRequest.Validate if the designated constraints aren't met.
type ListActiveTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActiveTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActiveTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActiveTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActiveTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActiveTeamRequestValidationError) ErrorName() string {
	return "ListActiveTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActiveTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActiveTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActiveTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActiveTeamRequestValidationError{}

// Validate checks the field values on ListActiveTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActiveTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActiveTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActiveTeamResponseMultiError, or nil if none found.
func (m *ListActiveTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActiveTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeamInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListActiveTeamResponseValidationError{
						field:  fmt.Sprintf("TeamInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListActiveTeamResponseValidationError{
						field:  fmt.Sprintf("TeamInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActiveTeamResponseValidationError{
					field:  fmt.Sprintf("TeamInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListActiveTeamResponseMultiError(errors)
	}

	return nil
}

// ListActiveTeamResponseMultiError is an error wrapping multiple validation
// errors returned by ListActiveTeamResponse.ValidateAll() if the designated
// constraints aren't met.
type ListActiveTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActiveTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActiveTeamResponseMultiError) AllErrors() []error { return m }

// ListActiveTeamResponseValidationError is the validation error returned by
// ListActiveTeamResponse.Validate if the designated constraints aren't met.
type ListActiveTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActiveTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActiveTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActiveTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActiveTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActiveTeamResponseValidationError) ErrorName() string {
	return "ListActiveTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListActiveTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActiveTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActiveTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActiveTeamResponseValidationError{}

// Validate checks the field values on UpdateTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeamRequestMultiError, or nil if none found.
func (m *UpdateTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for LeagueId

	// no validation rules for Title

	// no validation rules for TeamTime

	// no validation rules for DungeonName

	// no validation rules for BookXuanjing

	// no validation rules for BookYuntie

	// no validation rules for IsVisible

	// no validation rules for IsLock

	// no validation rules for Rule

	// no validation rules for Notice

	// no validation rules for IsClose

	if len(errors) > 0 {
		return UpdateTeamRequestMultiError(errors)
	}

	return nil
}

// UpdateTeamRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeamRequestMultiError) AllErrors() []error { return m }

// UpdateTeamRequestValidationError is the validation error returned by
// UpdateTeamRequest.Validate if the designated constraints aren't met.
type UpdateTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamRequestValidationError) ErrorName() string {
	return "UpdateTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamRequestValidationError{}

// Validate checks the field values on UpdateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeamResponseMultiError, or nil if none found.
func (m *UpdateTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTeamResponseMultiError(errors)
	}

	return nil
}

// UpdateTeamResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateTeamResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeamResponseMultiError) AllErrors() []error { return m }

// UpdateTeamResponseValidationError is the validation error returned by
// UpdateTeamResponse.Validate if the designated constraints aren't met.
type UpdateTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeamResponseValidationError) ErrorName() string {
	return "UpdateTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeamResponseValidationError{}

// Validate checks the field values on SetTeamVisibleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTeamVisibleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTeamVisibleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTeamVisibleRequestMultiError, or nil if none found.
func (m *SetTeamVisibleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTeamVisibleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for IsVisible

	if len(errors) > 0 {
		return SetTeamVisibleRequestMultiError(errors)
	}

	return nil
}

// SetTeamVisibleRequestMultiError is an error wrapping multiple validation
// errors returned by SetTeamVisibleRequest.ValidateAll() if the designated
// constraints aren't met.
type SetTeamVisibleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTeamVisibleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTeamVisibleRequestMultiError) AllErrors() []error { return m }

// SetTeamVisibleRequestValidationError is the validation error returned by
// SetTeamVisibleRequest.Validate if the designated constraints aren't met.
type SetTeamVisibleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTeamVisibleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTeamVisibleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTeamVisibleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTeamVisibleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTeamVisibleRequestValidationError) ErrorName() string {
	return "SetTeamVisibleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetTeamVisibleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTeamVisibleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTeamVisibleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTeamVisibleRequestValidationError{}

// Validate checks the field values on SetTeamVisibleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTeamVisibleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTeamVisibleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTeamVisibleResponseMultiError, or nil if none found.
func (m *SetTeamVisibleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTeamVisibleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetTeamVisibleResponseMultiError(errors)
	}

	return nil
}

// SetTeamVisibleResponseMultiError is an error wrapping multiple validation
// errors returned by SetTeamVisibleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetTeamVisibleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTeamVisibleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTeamVisibleResponseMultiError) AllErrors() []error { return m }

// SetTeamVisibleResponseValidationError is the validation error returned by
// SetTeamVisibleResponse.Validate if the designated constraints aren't met.
type SetTeamVisibleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTeamVisibleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTeamVisibleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTeamVisibleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTeamVisibleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTeamVisibleResponseValidationError) ErrorName() string {
	return "SetTeamVisibleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetTeamVisibleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTeamVisibleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTeamVisibleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTeamVisibleResponseValidationError{}

// Validate checks the field values on SetTeamLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTeamLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTeamLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTeamLockRequestMultiError, or nil if none found.
func (m *SetTeamLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTeamLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for IsLock

	if len(errors) > 0 {
		return SetTeamLockRequestMultiError(errors)
	}

	return nil
}

// SetTeamLockRequestMultiError is an error wrapping multiple validation errors
// returned by SetTeamLockRequest.ValidateAll() if the designated constraints
// aren't met.
type SetTeamLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTeamLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTeamLockRequestMultiError) AllErrors() []error { return m }

// SetTeamLockRequestValidationError is the validation error returned by
// SetTeamLockRequest.Validate if the designated constraints aren't met.
type SetTeamLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTeamLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTeamLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTeamLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTeamLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTeamLockRequestValidationError) ErrorName() string {
	return "SetTeamLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetTeamLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTeamLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTeamLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTeamLockRequestValidationError{}

// Validate checks the field values on SetTeamLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTeamLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTeamLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTeamLockResponseMultiError, or nil if none found.
func (m *SetTeamLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTeamLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetTeamLockResponseMultiError(errors)
	}

	return nil
}

// SetTeamLockResponseMultiError is an error wrapping multiple validation
// errors returned by SetTeamLockResponse.ValidateAll() if the designated
// constraints aren't met.
type SetTeamLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTeamLockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTeamLockResponseMultiError) AllErrors() []error { return m }

// SetTeamLockResponseValidationError is the validation error returned by
// SetTeamLockResponse.Validate if the designated constraints aren't met.
type SetTeamLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTeamLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTeamLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTeamLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTeamLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTeamLockResponseValidationError) ErrorName() string {
	return "SetTeamLockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetTeamLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTeamLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTeamLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTeamLockResponseValidationError{}

// Validate checks the field values on SetTeamCloseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTeamCloseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTeamCloseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTeamCloseRequestMultiError, or nil if none found.
func (m *SetTeamCloseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTeamCloseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for IsClose

	if len(errors) > 0 {
		return SetTeamCloseRequestMultiError(errors)
	}

	return nil
}

// SetTeamCloseRequestMultiError is an error wrapping multiple validation
// errors returned by SetTeamCloseRequest.ValidateAll() if the designated
// constraints aren't met.
type SetTeamCloseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTeamCloseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTeamCloseRequestMultiError) AllErrors() []error { return m }

// SetTeamCloseRequestValidationError is the validation error returned by
// SetTeamCloseRequest.Validate if the designated constraints aren't met.
type SetTeamCloseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTeamCloseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTeamCloseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTeamCloseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTeamCloseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTeamCloseRequestValidationError) ErrorName() string {
	return "SetTeamCloseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetTeamCloseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTeamCloseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTeamCloseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTeamCloseRequestValidationError{}

// Validate checks the field values on SetTeamCloseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetTeamCloseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTeamCloseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTeamCloseResponseMultiError, or nil if none found.
func (m *SetTeamCloseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTeamCloseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetTeamCloseResponseMultiError(errors)
	}

	return nil
}

// SetTeamCloseResponseMultiError is an error wrapping multiple validation
// errors returned by SetTeamCloseResponse.ValidateAll() if the designated
// constraints aren't met.
type SetTeamCloseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTeamCloseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTeamCloseResponseMultiError) AllErrors() []error { return m }

// SetTeamCloseResponseValidationError is the validation error returned by
// SetTeamCloseResponse.Validate if the designated constraints aren't met.
type SetTeamCloseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTeamCloseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTeamCloseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTeamCloseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTeamCloseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTeamCloseResponseValidationError) ErrorName() string {
	return "SetTeamCloseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetTeamCloseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTeamCloseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTeamCloseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTeamCloseResponseValidationError{}

// Validate checks the field values on CreateTeamTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamTemplateRequestMultiError, or nil if none found.
func (m *CreateTeamTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreaterId

	// no validation rules for CreaterQqNumber

	// no validation rules for LeagueId

	// no validation rules for Ukey

	// no validation rules for Title

	// no validation rules for Rule

	// no validation rules for Notice

	if len(errors) > 0 {
		return CreateTeamTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateTeamTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTeamTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateTeamTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamTemplateRequestMultiError) AllErrors() []error { return m }

// CreateTeamTemplateRequestValidationError is the validation error returned by
// CreateTeamTemplateRequest.Validate if the designated constraints aren't met.
type CreateTeamTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamTemplateRequestValidationError) ErrorName() string {
	return "CreateTeamTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamTemplateRequestValidationError{}

// Validate checks the field values on CreateTeamTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamTemplateResponseMultiError, or nil if none found.
func (m *CreateTeamTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return CreateTeamTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateTeamTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by CreateTeamTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateTeamTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamTemplateResponseMultiError) AllErrors() []error { return m }

// CreateTeamTemplateResponseValidationError is the validation error returned
// by CreateTeamTemplateResponse.Validate if the designated constraints aren't met.
type CreateTeamTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamTemplateResponseValidationError) ErrorName() string {
	return "CreateTeamTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamTemplateResponseValidationError{}

// Validate checks the field values on TeamTemplateInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TeamTemplateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TeamTemplateInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TeamTemplateInfoMultiError, or nil if none found.
func (m *TeamTemplateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TeamTemplateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	// no validation rules for CreaterId

	// no validation rules for CreaterQqNumber

	// no validation rules for LeagueId

	// no validation rules for Ukey

	// no validation rules for Title

	// no validation rules for Rule

	// no validation rules for Notice

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return TeamTemplateInfoMultiError(errors)
	}

	return nil
}

// TeamTemplateInfoMultiError is an error wrapping multiple validation errors
// returned by TeamTemplateInfo.ValidateAll() if the designated constraints
// aren't met.
type TeamTemplateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeamTemplateInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeamTemplateInfoMultiError) AllErrors() []error { return m }

// TeamTemplateInfoValidationError is the validation error returned by
// TeamTemplateInfo.Validate if the designated constraints aren't met.
type TeamTemplateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeamTemplateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeamTemplateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeamTemplateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeamTemplateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeamTemplateInfoValidationError) ErrorName() string { return "TeamTemplateInfoValidationError" }

// Error satisfies the builtin error interface
func (e TeamTemplateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeamTemplateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeamTemplateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeamTemplateInfoValidationError{}

// Validate checks the field values on ListTeamTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeamTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamTemplateRequestMultiError, or nil if none found.
func (m *ListTeamTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ukey

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for PageCount

	if len(errors) > 0 {
		return ListTeamTemplateRequestMultiError(errors)
	}

	return nil
}

// ListTeamTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ListTeamTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTeamTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamTemplateRequestMultiError) AllErrors() []error { return m }

// ListTeamTemplateRequestValidationError is the validation error returned by
// ListTeamTemplateRequest.Validate if the designated constraints aren't met.
type ListTeamTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamTemplateRequestValidationError) ErrorName() string {
	return "ListTeamTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamTemplateRequestValidationError{}

// Validate checks the field values on ListTeamTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeamTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeamTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeamTemplateResponseMultiError, or nil if none found.
func (m *ListTeamTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeamTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeamTemplateInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeamTemplateResponseValidationError{
						field:  fmt.Sprintf("TeamTemplateInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeamTemplateResponseValidationError{
						field:  fmt.Sprintf("TeamTemplateInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeamTemplateResponseValidationError{
					field:  fmt.Sprintf("TeamTemplateInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeamTemplateResponseMultiError(errors)
	}

	return nil
}

// ListTeamTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by ListTeamTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTeamTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeamTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeamTemplateResponseMultiError) AllErrors() []error { return m }

// ListTeamTemplateResponseValidationError is the validation error returned by
// ListTeamTemplateResponse.Validate if the designated constraints aren't met.
type ListTeamTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeamTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeamTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeamTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeamTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeamTemplateResponseValidationError) ErrorName() string {
	return "ListTeamTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeamTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeamTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeamTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeamTemplateResponseValidationError{}

// Validate checks the field values on DeleteTeamTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeamTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeamTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeamTemplateRequestMultiError, or nil if none found.
func (m *DeleteTeamTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeamTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return DeleteTeamTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTeamTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTeamTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteTeamTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeamTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeamTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTeamTemplateRequestValidationError is the validation error returned by
// DeleteTeamTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTeamTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeamTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeamTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeamTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeamTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeamTemplateRequestValidationError) ErrorName() string {
	return "DeleteTeamTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeamTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeamTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeamTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeamTemplateRequestValidationError{}

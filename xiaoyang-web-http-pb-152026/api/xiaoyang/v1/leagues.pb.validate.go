// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/xiaoyang/v1/leagues.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateLeagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLeagueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLeagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLeagueRequestMultiError, or nil if none found.
func (m *CreateLeagueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLeagueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for QqNumber

	// no validation rules for GroupNumber

	// no validation rules for Ukey

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Avatar

	// no validation rules for ExpiredAt

	// no validation rules for Preferences

	if len(errors) > 0 {
		return CreateLeagueRequestMultiError(errors)
	}

	return nil
}

// CreateLeagueRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLeagueRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLeagueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLeagueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLeagueRequestMultiError) AllErrors() []error { return m }

// CreateLeagueRequestValidationError is the validation error returned by
// CreateLeagueRequest.Validate if the designated constraints aren't met.
type CreateLeagueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLeagueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLeagueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLeagueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLeagueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLeagueRequestValidationError) ErrorName() string {
	return "CreateLeagueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLeagueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLeagueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLeagueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLeagueRequestValidationError{}

// Validate checks the field values on CreateLeagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLeagueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLeagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLeagueResponseMultiError, or nil if none found.
func (m *CreateLeagueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLeagueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateLeagueResponseMultiError(errors)
	}

	return nil
}

// CreateLeagueResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLeagueResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLeagueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLeagueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLeagueResponseMultiError) AllErrors() []error { return m }

// CreateLeagueResponseValidationError is the validation error returned by
// CreateLeagueResponse.Validate if the designated constraints aren't met.
type CreateLeagueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLeagueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLeagueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLeagueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLeagueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLeagueResponseValidationError) ErrorName() string {
	return "CreateLeagueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLeagueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLeagueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLeagueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLeagueResponseValidationError{}

// Validate checks the field values on LeagueSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LeagueSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeagueSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LeagueSummaryMultiError, or
// nil if none found.
func (m *LeagueSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *LeagueSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GroupNumber

	// no validation rules for Ukey

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Avatar

	if len(errors) > 0 {
		return LeagueSummaryMultiError(errors)
	}

	return nil
}

// LeagueSummaryMultiError is an error wrapping multiple validation errors
// returned by LeagueSummary.ValidateAll() if the designated constraints
// aren't met.
type LeagueSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeagueSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeagueSummaryMultiError) AllErrors() []error { return m }

// LeagueSummaryValidationError is the validation error returned by
// LeagueSummary.Validate if the designated constraints aren't met.
type LeagueSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeagueSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeagueSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeagueSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeagueSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeagueSummaryValidationError) ErrorName() string { return "LeagueSummaryValidationError" }

// Error satisfies the builtin error interface
func (e LeagueSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeagueSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeagueSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeagueSummaryValidationError{}

// Validate checks the field values on ListLeaguesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLeaguesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLeaguesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLeaguesRequestMultiError, or nil if none found.
func (m *ListLeaguesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLeaguesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for QqNumber

	if len(errors) > 0 {
		return ListLeaguesRequestMultiError(errors)
	}

	return nil
}

// ListLeaguesRequestMultiError is an error wrapping multiple validation errors
// returned by ListLeaguesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLeaguesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLeaguesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLeaguesRequestMultiError) AllErrors() []error { return m }

// ListLeaguesRequestValidationError is the validation error returned by
// ListLeaguesRequest.Validate if the designated constraints aren't met.
type ListLeaguesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLeaguesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLeaguesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLeaguesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLeaguesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLeaguesRequestValidationError) ErrorName() string {
	return "ListLeaguesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLeaguesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLeaguesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLeaguesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLeaguesRequestValidationError{}

// Validate checks the field values on ListLeaguesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLeaguesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLeaguesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLeaguesResponseMultiError, or nil if none found.
func (m *ListLeaguesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLeaguesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLeagues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLeaguesResponseValidationError{
						field:  fmt.Sprintf("Leagues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLeaguesResponseValidationError{
						field:  fmt.Sprintf("Leagues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLeaguesResponseValidationError{
					field:  fmt.Sprintf("Leagues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLeaguesResponseMultiError(errors)
	}

	return nil
}

// ListLeaguesResponseMultiError is an error wrapping multiple validation
// errors returned by ListLeaguesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLeaguesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLeaguesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLeaguesResponseMultiError) AllErrors() []error { return m }

// ListLeaguesResponseValidationError is the validation error returned by
// ListLeaguesResponse.Validate if the designated constraints aren't met.
type ListLeaguesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLeaguesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLeaguesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLeaguesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLeaguesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLeaguesResponseValidationError) ErrorName() string {
	return "ListLeaguesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLeaguesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLeaguesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLeaguesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLeaguesResponseValidationError{}

// Validate checks the field values on GetLeagueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLeagueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeagueRequestMultiError, or nil if none found.
func (m *GetLeagueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeagueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ukey

	if len(errors) > 0 {
		return GetLeagueRequestMultiError(errors)
	}

	return nil
}

// GetLeagueRequestMultiError is an error wrapping multiple validation errors
// returned by GetLeagueRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLeagueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeagueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeagueRequestMultiError) AllErrors() []error { return m }

// GetLeagueRequestValidationError is the validation error returned by
// GetLeagueRequest.Validate if the designated constraints aren't met.
type GetLeagueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeagueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeagueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeagueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeagueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeagueRequestValidationError) ErrorName() string { return "GetLeagueRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLeagueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeagueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeagueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeagueRequestValidationError{}

// Validate checks the field values on GetLeagueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLeagueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeagueResponseMultiError, or nil if none found.
func (m *GetLeagueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeagueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GroupNumber

	// no validation rules for Ukey

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Avatar

	// no validation rules for ExpiredAt

	// no validation rules for Preferences

	if len(errors) > 0 {
		return GetLeagueResponseMultiError(errors)
	}

	return nil
}

// GetLeagueResponseMultiError is an error wrapping multiple validation errors
// returned by GetLeagueResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLeagueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeagueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeagueResponseMultiError) AllErrors() []error { return m }

// GetLeagueResponseValidationError is the validation error returned by
// GetLeagueResponse.Validate if the designated constraints aren't met.
type GetLeagueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeagueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeagueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeagueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeagueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeagueResponseValidationError) ErrorName() string {
	return "GetLeagueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeagueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeagueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeagueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeagueResponseValidationError{}

// Validate checks the field values on UpdateLeagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLeagueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLeagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLeagueRequestMultiError, or nil if none found.
func (m *UpdateLeagueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLeagueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for GroupNumber

	// no validation rules for Ukey

	// no validation rules for Name

	// no validation rules for Server

	// no validation rules for Avatar

	// no validation rules for Preferences

	if len(errors) > 0 {
		return UpdateLeagueRequestMultiError(errors)
	}

	return nil
}

// UpdateLeagueRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLeagueRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLeagueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLeagueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLeagueRequestMultiError) AllErrors() []error { return m }

// UpdateLeagueRequestValidationError is the validation error returned by
// UpdateLeagueRequest.Validate if the designated constraints aren't met.
type UpdateLeagueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLeagueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLeagueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLeagueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLeagueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLeagueRequestValidationError) ErrorName() string {
	return "UpdateLeagueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLeagueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLeagueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLeagueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLeagueRequestValidationError{}

// Validate checks the field values on UpdateLeagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLeagueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLeagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLeagueResponseMultiError, or nil if none found.
func (m *UpdateLeagueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLeagueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateLeagueResponseMultiError(errors)
	}

	return nil
}

// UpdateLeagueResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateLeagueResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLeagueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLeagueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLeagueResponseMultiError) AllErrors() []error { return m }

// UpdateLeagueResponseValidationError is the validation error returned by
// UpdateLeagueResponse.Validate if the designated constraints aren't met.
type UpdateLeagueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLeagueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLeagueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLeagueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLeagueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLeagueResponseValidationError) ErrorName() string {
	return "UpdateLeagueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLeagueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLeagueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLeagueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLeagueResponseValidationError{}

// Validate checks the field values on UpdateLeagueExpiredAtRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLeagueExpiredAtRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLeagueExpiredAtRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLeagueExpiredAtRequestMultiError, or nil if none found.
func (m *UpdateLeagueExpiredAtRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLeagueExpiredAtRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ukey

	// no validation rules for ExpiredAt

	if len(errors) > 0 {
		return UpdateLeagueExpiredAtRequestMultiError(errors)
	}

	return nil
}

// UpdateLeagueExpiredAtRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateLeagueExpiredAtRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateLeagueExpiredAtRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLeagueExpiredAtRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLeagueExpiredAtRequestMultiError) AllErrors() []error { return m }

// UpdateLeagueExpiredAtRequestValidationError is the validation error returned
// by UpdateLeagueExpiredAtRequest.Validate if the designated constraints
// aren't met.
type UpdateLeagueExpiredAtRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLeagueExpiredAtRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLeagueExpiredAtRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLeagueExpiredAtRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLeagueExpiredAtRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLeagueExpiredAtRequestValidationError) ErrorName() string {
	return "UpdateLeagueExpiredAtRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLeagueExpiredAtRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLeagueExpiredAtRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLeagueExpiredAtRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLeagueExpiredAtRequestValidationError{}

// Validate checks the field values on UpdateLeagueExpiredAtResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLeagueExpiredAtResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLeagueExpiredAtResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateLeagueExpiredAtResponseMultiError, or nil if none found.
func (m *UpdateLeagueExpiredAtResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLeagueExpiredAtResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateLeagueExpiredAtResponseMultiError(errors)
	}

	return nil
}

// UpdateLeagueExpiredAtResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateLeagueExpiredAtResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateLeagueExpiredAtResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLeagueExpiredAtResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLeagueExpiredAtResponseMultiError) AllErrors() []error { return m }

// UpdateLeagueExpiredAtResponseValidationError is the validation error
// returned by UpdateLeagueExpiredAtResponse.Validate if the designated
// constraints aren't met.
type UpdateLeagueExpiredAtResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLeagueExpiredAtResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLeagueExpiredAtResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLeagueExpiredAtResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLeagueExpiredAtResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLeagueExpiredAtResponseValidationError) ErrorName() string {
	return "UpdateLeagueExpiredAtResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLeagueExpiredAtResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLeagueExpiredAtResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLeagueExpiredAtResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLeagueExpiredAtResponseValidationError{}

// Validate checks the field values on JoinLeagueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinLeagueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinLeagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinLeagueRequestMultiError, or nil if none found.
func (m *JoinLeagueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinLeagueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for QqNumber

	// no validation rules for GroupNumber

	// no validation rules for GroupId

	// no validation rules for Ukey

	// no validation rules for Role

	// no validation rules for GroupNickname

	if len(errors) > 0 {
		return JoinLeagueRequestMultiError(errors)
	}

	return nil
}

// JoinLeagueRequestMultiError is an error wrapping multiple validation errors
// returned by JoinLeagueRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinLeagueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinLeagueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinLeagueRequestMultiError) AllErrors() []error { return m }

// JoinLeagueRequestValidationError is the validation error returned by
// JoinLeagueRequest.Validate if the designated constraints aren't met.
type JoinLeagueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinLeagueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinLeagueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinLeagueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinLeagueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinLeagueRequestValidationError) ErrorName() string {
	return "JoinLeagueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e JoinLeagueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinLeagueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinLeagueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinLeagueRequestValidationError{}

// Validate checks the field values on JoinLeagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JoinLeagueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinLeagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinLeagueResponseMultiError, or nil if none found.
func (m *JoinLeagueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinLeagueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JoinLeagueResponseMultiError(errors)
	}

	return nil
}

// JoinLeagueResponseMultiError is an error wrapping multiple validation errors
// returned by JoinLeagueResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinLeagueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinLeagueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinLeagueResponseMultiError) AllErrors() []error { return m }

// JoinLeagueResponseValidationError is the validation error returned by
// JoinLeagueResponse.Validate if the designated constraints aren't met.
type JoinLeagueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinLeagueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinLeagueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinLeagueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinLeagueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinLeagueResponseValidationError) ErrorName() string {
	return "JoinLeagueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e JoinLeagueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinLeagueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinLeagueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinLeagueResponseValidationError{}

// Validate checks the field values on SetUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserRoleRequestMultiError, or nil if none found.
func (m *SetUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for QqNumber

	// no validation rules for GroupId

	// no validation rules for Ukey

	// no validation rules for Role

	if len(errors) > 0 {
		return SetUserRoleRequestMultiError(errors)
	}

	return nil
}

// SetUserRoleRequestMultiError is an error wrapping multiple validation errors
// returned by SetUserRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type SetUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserRoleRequestMultiError) AllErrors() []error { return m }

// SetUserRoleRequestValidationError is the validation error returned by
// SetUserRoleRequest.Validate if the designated constraints aren't met.
type SetUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserRoleRequestValidationError) ErrorName() string {
	return "SetUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserRoleRequestValidationError{}

// Validate checks the field values on SetUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserRoleResponseMultiError, or nil if none found.
func (m *SetUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserRoleResponseMultiError(errors)
	}

	return nil
}

// SetUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by SetUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserRoleResponseMultiError) AllErrors() []error { return m }

// SetUserRoleResponseValidationError is the validation error returned by
// SetUserRoleResponse.Validate if the designated constraints aren't met.
type SetUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserRoleResponseValidationError) ErrorName() string {
	return "SetUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserRoleResponseValidationError{}

// Validate checks the field values on SetUserNicknameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserNicknameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserNicknameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserNicknameRequestMultiError, or nil if none found.
func (m *SetUserNicknameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserNicknameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for QqNumber

	// no validation rules for GroupId

	// no validation rules for Ukey

	// no validation rules for Nickname

	if len(errors) > 0 {
		return SetUserNicknameRequestMultiError(errors)
	}

	return nil
}

// SetUserNicknameRequestMultiError is an error wrapping multiple validation
// errors returned by SetUserNicknameRequest.ValidateAll() if the designated
// constraints aren't met.
type SetUserNicknameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserNicknameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserNicknameRequestMultiError) AllErrors() []error { return m }

// SetUserNicknameRequestValidationError is the validation error returned by
// SetUserNicknameRequest.Validate if the designated constraints aren't met.
type SetUserNicknameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserNicknameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserNicknameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserNicknameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserNicknameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserNicknameRequestValidationError) ErrorName() string {
	return "SetUserNicknameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserNicknameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserNicknameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserNicknameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserNicknameRequestValidationError{}

// Validate checks the field values on SetUserNicknameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserNicknameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserNicknameResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserNicknameResponseMultiError, or nil if none found.
func (m *SetUserNicknameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserNicknameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserNicknameResponseMultiError(errors)
	}

	return nil
}

// SetUserNicknameResponseMultiError is an error wrapping multiple validation
// errors returned by SetUserNicknameResponse.ValidateAll() if the designated
// constraints aren't met.
type SetUserNicknameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserNicknameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserNicknameResponseMultiError) AllErrors() []error { return m }

// SetUserNicknameResponseValidationError is the validation error returned by
// SetUserNicknameResponse.Validate if the designated constraints aren't met.
type SetUserNicknameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserNicknameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserNicknameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserNicknameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserNicknameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserNicknameResponseValidationError) ErrorName() string {
	return "SetUserNicknameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserNicknameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserNicknameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserNicknameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserNicknameResponseValidationError{}

// Validate checks the field values on LeagueMemberSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeagueMemberSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeagueMemberSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeagueMemberSummaryMultiError, or nil if none found.
func (m *LeagueMemberSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *LeagueMemberSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for QqNumber

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Role

	// no validation rules for GroupNickname

	if len(errors) > 0 {
		return LeagueMemberSummaryMultiError(errors)
	}

	return nil
}

// LeagueMemberSummaryMultiError is an error wrapping multiple validation
// errors returned by LeagueMemberSummary.ValidateAll() if the designated
// constraints aren't met.
type LeagueMemberSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeagueMemberSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeagueMemberSummaryMultiError) AllErrors() []error { return m }

// LeagueMemberSummaryValidationError is the validation error returned by
// LeagueMemberSummary.Validate if the designated constraints aren't met.
type LeagueMemberSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeagueMemberSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeagueMemberSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeagueMemberSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeagueMemberSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeagueMemberSummaryValidationError) ErrorName() string {
	return "LeagueMemberSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e LeagueMemberSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeagueMemberSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeagueMemberSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeagueMemberSummaryValidationError{}

// Validate checks the field values on ListLeagueMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLeagueMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLeagueMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLeagueMembersRequestMultiError, or nil if none found.
func (m *ListLeagueMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLeagueMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Ukey

	if len(errors) > 0 {
		return ListLeagueMembersRequestMultiError(errors)
	}

	return nil
}

// ListLeagueMembersRequestMultiError is an error wrapping multiple validation
// errors returned by ListLeagueMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLeagueMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLeagueMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLeagueMembersRequestMultiError) AllErrors() []error { return m }

// ListLeagueMembersRequestValidationError is the validation error returned by
// ListLeagueMembersRequest.Validate if the designated constraints aren't met.
type ListLeagueMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLeagueMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLeagueMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLeagueMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLeagueMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLeagueMembersRequestValidationError) ErrorName() string {
	return "ListLeagueMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLeagueMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLeagueMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLeagueMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLeagueMembersRequestValidationError{}

// Validate checks the field values on ListLeagueMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLeagueMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLeagueMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLeagueMembersResponseMultiError, or nil if none found.
func (m *ListLeagueMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLeagueMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLeagueMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLeagueMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLeagueMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLeagueMembersResponseMultiError(errors)
	}

	return nil
}

// ListLeagueMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListLeagueMembersResponse.ValidateAll() if the
// designated constraints aren't met.
type ListLeagueMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLeagueMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLeagueMembersResponseMultiError) AllErrors() []error { return m }

// ListLeagueMembersResponseValidationError is the validation error returned by
// ListLeagueMembersResponse.Validate if the designated constraints aren't met.
type ListLeagueMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLeagueMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLeagueMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLeagueMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLeagueMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLeagueMembersResponseValidationError) ErrorName() string {
	return "ListLeagueMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLeagueMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLeagueMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLeagueMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLeagueMembersResponseValidationError{}

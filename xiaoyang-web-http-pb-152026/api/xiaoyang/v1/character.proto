syntax = "proto3";

package api.xiaoyang.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "xiaoyang/api/xiaoyang/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080",
  base_path: "",
  info: {
    title: "xiaoyang api docs",
    version: "2.0",
  }
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Input a \"Bearer your-jwt-token\" to Value"
      }
    },
    security: {
      key: "LeagueAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "LeagueKey"
        description: "Input league key to Value Input league key to Value"
      }
    },
  }
};

service CharacterService {
  // 创建角色
  rpc CreateCharacter(CreateCharacterRequest) returns (CreateCharacterResponse) {
    option (google.api.http) = {
      post: "/v1/character"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "创建角色"
      description: "创建角色"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 获取用户的角色列表
  rpc ListCharacter(ListCharacterRequest) returns (ListCharacterResponse) {
    option (google.api.http) = {
      get: "/v1/character/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取用户的角色列表"
      description: "获取用户的角色列表"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 删除角色
  rpc DeleteCharacter(DeleteCharacterRequest) returns (DeleteCharacterResponse) {
    option (google.api.http) = {
      delete: "/v1/character/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除角色"
      description: "删除角色"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 更新角色
  rpc UpdateCharacter(UpdateCharacterRequest) returns (UpdateCharacterResponse) {
    option (google.api.http) = {
      put: "/v1/character/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新角色"
      description: "更新角色"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }
}

// 角色信息
message CharacterInfo {
  int64 id = 1;
  int64 user_id = 2;
  string qq_number = 3;
  string name = 4;
  string server = 5;
  string xinfa = 6;
  string remark = 7;
}

// 创建角色请求
message CreateCharacterRequest {
  CharacterInfo character = 1;
}

// 创建角色响应
message CreateCharacterResponse {
  int64 id = 1;
}

// 获取用户的角色列表请求
message ListCharacterRequest {
  int64 user_id = 1;
  string qq_number = 2;
}

// 获取用户的角色列表响应
message ListCharacterResponse {
  repeated CharacterInfo character_list = 1;
}

// 删除角色请求
message DeleteCharacterRequest {
  int64 id = 1;
}

// 删除角色响应
message DeleteCharacterResponse {}

// 更新角色请求
message UpdateCharacterRequest {
  int64 id = 1;
  CharacterInfo character = 2;
}

// 更新角色响应
message UpdateCharacterResponse {}
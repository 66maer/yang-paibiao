// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.2
// source: api/xiaoyang/v1/team.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 开团请求
type CreateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreaterId       int64  `protobuf:"varint,1,opt,name=creater_id,json=createrId,proto3" json:"creater_id"`                    // 创建者id
	CreaterQqNumber string `protobuf:"bytes,2,opt,name=creater_qq_number,json=createrQqNumber,proto3" json:"creater_qq_number"` // 创建者qq号
	LeagueId        int64  `protobuf:"varint,3,opt,name=league_id,json=leagueId,proto3" json:"league_id"`                       // 组织id
	Ukey            string `protobuf:"bytes,4,opt,name=ukey,proto3" json:"ukey"`                                                // 组织唯一标识
	Title           string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`                                              // 开团标题
	TeamTime        int64  `protobuf:"varint,6,opt,name=team_time,json=teamTime,proto3" json:"team_time"`                       // 开团时间
	DungeonName     string `protobuf:"bytes,7,opt,name=dungeon_name,json=dungeonName,proto3" json:"dungeon_name"`               // 副本名称
	BookXuanjing    bool   `protobuf:"varint,8,opt,name=book_xuanjing,json=bookXuanjing,proto3" json:"book_xuanjing"`           // 是否有人预定玄晶
	BookYuntie      bool   `protobuf:"varint,9,opt,name=book_yuntie,json=bookYuntie,proto3" json:"book_yuntie"`                 // 是否有人预定陨铁
	IsVisible       bool   `protobuf:"varint,10,opt,name=is_visible,json=isVisible,proto3" json:"is_visible"`                   // 是否对外可见
	IsLock          bool   `protobuf:"varint,11,opt,name=is_lock,json=isLock,proto3" json:"is_lock"`                            // 是否锁定
	Rule            string `protobuf:"bytes,12,opt,name=rule,proto3" json:"rule"`                                               // 规则
	Notice          string `protobuf:"bytes,13,opt,name=notice,proto3" json:"notice"`                                           // 公告
}

func (x *CreateTeamRequest) Reset() {
	*x = CreateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamRequest) ProtoMessage() {}

func (x *CreateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTeamRequest) GetCreaterId() int64 {
	if x != nil {
		return x.CreaterId
	}
	return 0
}

func (x *CreateTeamRequest) GetCreaterQqNumber() string {
	if x != nil {
		return x.CreaterQqNumber
	}
	return ""
}

func (x *CreateTeamRequest) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *CreateTeamRequest) GetUkey() string {
	if x != nil {
		return x.Ukey
	}
	return ""
}

func (x *CreateTeamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTeamRequest) GetTeamTime() int64 {
	if x != nil {
		return x.TeamTime
	}
	return 0
}

func (x *CreateTeamRequest) GetDungeonName() string {
	if x != nil {
		return x.DungeonName
	}
	return ""
}

func (x *CreateTeamRequest) GetBookXuanjing() bool {
	if x != nil {
		return x.BookXuanjing
	}
	return false
}

func (x *CreateTeamRequest) GetBookYuntie() bool {
	if x != nil {
		return x.BookYuntie
	}
	return false
}

func (x *CreateTeamRequest) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

func (x *CreateTeamRequest) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

func (x *CreateTeamRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *CreateTeamRequest) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

// 开团响应
type CreateTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id"` // 开团id
}

func (x *CreateTeamResponse) Reset() {
	*x = CreateTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamResponse) ProtoMessage() {}

func (x *CreateTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamResponse.ProtoReflect.Descriptor instead.
func (*CreateTeamResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTeamResponse) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

// 开团信息
type TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId          int64  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id"`                             // 开团id
	CreaterId       int64  `protobuf:"varint,2,opt,name=creater_id,json=createrId,proto3" json:"creater_id"`                    // 创建者id
	CreaterQqNumber string `protobuf:"bytes,3,opt,name=creater_qq_number,json=createrQqNumber,proto3" json:"creater_qq_number"` // 创建者qq号
	LeagueId        int64  `protobuf:"varint,4,opt,name=league_id,json=leagueId,proto3" json:"league_id"`                       // 组织id
	Ukey            string `protobuf:"bytes,5,opt,name=ukey,proto3" json:"ukey"`                                                // 组织唯一标识
	Title           string `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`                                              // 开团标题
	TeamTime        int64  `protobuf:"varint,7,opt,name=team_time,json=teamTime,proto3" json:"team_time"`                       // 开团时间
	DungeonName     string `protobuf:"bytes,8,opt,name=dungeon_name,json=dungeonName,proto3" json:"dungeon_name"`               // 副本名称
	BookXuanjing    bool   `protobuf:"varint,9,opt,name=book_xuanjing,json=bookXuanjing,proto3" json:"book_xuanjing"`           // 是否有人预定玄晶
	BookYuntie      bool   `protobuf:"varint,10,opt,name=book_yuntie,json=bookYuntie,proto3" json:"book_yuntie"`                // 是否有人预定陨铁
	IsVisible       bool   `protobuf:"varint,11,opt,name=is_visible,json=isVisible,proto3" json:"is_visible"`                   // 是否对外可见
	IsLock          bool   `protobuf:"varint,12,opt,name=is_lock,json=isLock,proto3" json:"is_lock"`                            // 是否锁定
	Rule            string `protobuf:"bytes,13,opt,name=rule,proto3" json:"rule"`                                               // 规则
	Notice          string `protobuf:"bytes,14,opt,name=notice,proto3" json:"notice"`                                           // 公告
	CreateTime      int64  `protobuf:"varint,15,opt,name=create_time,json=createTime,proto3" json:"create_time"`                // 创建时间
	UpdateTime      int64  `protobuf:"varint,16,opt,name=update_time,json=updateTime,proto3" json:"update_time"`                // 更新时间
	CloseTime       int64  `protobuf:"varint,17,opt,name=close_time,json=closeTime,proto3" json:"close_time"`                   // 关闭时间
}

func (x *TeamInfo) Reset() {
	*x = TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfo) ProtoMessage() {}

func (x *TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfo.ProtoReflect.Descriptor instead.
func (*TeamInfo) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{2}
}

func (x *TeamInfo) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamInfo) GetCreaterId() int64 {
	if x != nil {
		return x.CreaterId
	}
	return 0
}

func (x *TeamInfo) GetCreaterQqNumber() string {
	if x != nil {
		return x.CreaterQqNumber
	}
	return ""
}

func (x *TeamInfo) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *TeamInfo) GetUkey() string {
	if x != nil {
		return x.Ukey
	}
	return ""
}

func (x *TeamInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TeamInfo) GetTeamTime() int64 {
	if x != nil {
		return x.TeamTime
	}
	return 0
}

func (x *TeamInfo) GetDungeonName() string {
	if x != nil {
		return x.DungeonName
	}
	return ""
}

func (x *TeamInfo) GetBookXuanjing() bool {
	if x != nil {
		return x.BookXuanjing
	}
	return false
}

func (x *TeamInfo) GetBookYuntie() bool {
	if x != nil {
		return x.BookYuntie
	}
	return false
}

func (x *TeamInfo) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

func (x *TeamInfo) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

func (x *TeamInfo) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *TeamInfo) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *TeamInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TeamInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TeamInfo) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

// 获取开团列表请求
type ListTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ukey      string `protobuf:"bytes,1,opt,name=ukey,proto3" json:"ukey"`                             // 组织唯一标识
	Page      int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page"`                            // 页码
	PageSize  int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`    // 每页数量
	PageCount int64  `protobuf:"varint,4,opt,name=page_count,json=pageCount,proto3" json:"page_count"` // 总页数
}

func (x *ListTeamRequest) Reset() {
	*x = ListTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamRequest) ProtoMessage() {}

func (x *ListTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamRequest.ProtoReflect.Descriptor instead.
func (*ListTeamRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{3}
}

func (x *ListTeamRequest) GetUkey() string {
	if x != nil {
		return x.Ukey
	}
	return ""
}

func (x *ListTeamRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTeamRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTeamRequest) GetPageCount() int64 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

// 获取开团列表响应
type ListTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamInfos []*TeamInfo `protobuf:"bytes,1,rep,name=team_infos,json=teamInfos,proto3" json:"team_infos"` // 开团信息
}

func (x *ListTeamResponse) Reset() {
	*x = ListTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamResponse) ProtoMessage() {}

func (x *ListTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamResponse.ProtoReflect.Descriptor instead.
func (*ListTeamResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{4}
}

func (x *ListTeamResponse) GetTeamInfos() []*TeamInfo {
	if x != nil {
		return x.TeamInfos
	}
	return nil
}

// 获取活跃的开团列表请求
type ListActiveTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ukey string `protobuf:"bytes,1,opt,name=ukey,proto3" json:"ukey"` // 组织唯一标识
}

func (x *ListActiveTeamRequest) Reset() {
	*x = ListActiveTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActiveTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveTeamRequest) ProtoMessage() {}

func (x *ListActiveTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveTeamRequest.ProtoReflect.Descriptor instead.
func (*ListActiveTeamRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{5}
}

func (x *ListActiveTeamRequest) GetUkey() string {
	if x != nil {
		return x.Ukey
	}
	return ""
}

// 获取活跃的开团列表响应
type ListActiveTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamInfos []*TeamInfo `protobuf:"bytes,1,rep,name=team_infos,json=teamInfos,proto3" json:"team_infos"` // 开团信息
}

func (x *ListActiveTeamResponse) Reset() {
	*x = ListActiveTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActiveTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActiveTeamResponse) ProtoMessage() {}

func (x *ListActiveTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActiveTeamResponse.ProtoReflect.Descriptor instead.
func (*ListActiveTeamResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{6}
}

func (x *ListActiveTeamResponse) GetTeamInfos() []*TeamInfo {
	if x != nil {
		return x.TeamInfos
	}
	return nil
}

// 更新开团信息请求
type UpdateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId       int64  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id"`                   // 开团id
	LeagueId     int64  `protobuf:"varint,2,opt,name=league_id,json=leagueId,proto3" json:"league_id"`             // 组织id
	Title        string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`                                    // 开团标题
	TeamTime     int64  `protobuf:"varint,4,opt,name=team_time,json=teamTime,proto3" json:"team_time"`             // 开团时间
	DungeonName  string `protobuf:"bytes,5,opt,name=dungeon_name,json=dungeonName,proto3" json:"dungeon_name"`     // 副本名称
	BookXuanjing bool   `protobuf:"varint,6,opt,name=book_xuanjing,json=bookXuanjing,proto3" json:"book_xuanjing"` // 是否有人预定玄晶
	BookYuntie   bool   `protobuf:"varint,7,opt,name=book_yuntie,json=bookYuntie,proto3" json:"book_yuntie"`       // 是否有人预定陨铁
	IsVisible    bool   `protobuf:"varint,8,opt,name=is_visible,json=isVisible,proto3" json:"is_visible"`          // 是否对外可见
	IsLock       bool   `protobuf:"varint,9,opt,name=is_lock,json=isLock,proto3" json:"is_lock"`                   // 是否锁定
	Rule         string `protobuf:"bytes,10,opt,name=rule,proto3" json:"rule"`                                     // 规则
	Notice       string `protobuf:"bytes,11,opt,name=notice,proto3" json:"notice"`                                 // 公告
	IsClose      bool   `protobuf:"varint,12,opt,name=is_close,json=isClose,proto3" json:"is_close"`               // 是否关闭
}

func (x *UpdateTeamRequest) Reset() {
	*x = UpdateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamRequest) ProtoMessage() {}

func (x *UpdateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTeamRequest) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *UpdateTeamRequest) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *UpdateTeamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateTeamRequest) GetTeamTime() int64 {
	if x != nil {
		return x.TeamTime
	}
	return 0
}

func (x *UpdateTeamRequest) GetDungeonName() string {
	if x != nil {
		return x.DungeonName
	}
	return ""
}

func (x *UpdateTeamRequest) GetBookXuanjing() bool {
	if x != nil {
		return x.BookXuanjing
	}
	return false
}

func (x *UpdateTeamRequest) GetBookYuntie() bool {
	if x != nil {
		return x.BookYuntie
	}
	return false
}

func (x *UpdateTeamRequest) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

func (x *UpdateTeamRequest) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

func (x *UpdateTeamRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *UpdateTeamRequest) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *UpdateTeamRequest) GetIsClose() bool {
	if x != nil {
		return x.IsClose
	}
	return false
}

// 更新开团信息响应
type UpdateTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTeamResponse) Reset() {
	*x = UpdateTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamResponse) ProtoMessage() {}

func (x *UpdateTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamResponse.ProtoReflect.Descriptor instead.
func (*UpdateTeamResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{8}
}

// 设定开团可见性请求
type SetTeamVisibleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id"`          // 开团id
	IsVisible bool  `protobuf:"varint,2,opt,name=is_visible,json=isVisible,proto3" json:"is_visible"` // 是否对外可见
}

func (x *SetTeamVisibleRequest) Reset() {
	*x = SetTeamVisibleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeamVisibleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamVisibleRequest) ProtoMessage() {}

func (x *SetTeamVisibleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamVisibleRequest.ProtoReflect.Descriptor instead.
func (*SetTeamVisibleRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{9}
}

func (x *SetTeamVisibleRequest) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *SetTeamVisibleRequest) GetIsVisible() bool {
	if x != nil {
		return x.IsVisible
	}
	return false
}

// 设定开团可见性响应
type SetTeamVisibleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTeamVisibleResponse) Reset() {
	*x = SetTeamVisibleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeamVisibleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamVisibleResponse) ProtoMessage() {}

func (x *SetTeamVisibleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamVisibleResponse.ProtoReflect.Descriptor instead.
func (*SetTeamVisibleResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{10}
}

// 设定开团锁定状态请求
type SetTeamLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id"` // 开团id
	IsLock bool  `protobuf:"varint,2,opt,name=is_lock,json=isLock,proto3" json:"is_lock"` // 是否锁定
}

func (x *SetTeamLockRequest) Reset() {
	*x = SetTeamLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeamLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamLockRequest) ProtoMessage() {}

func (x *SetTeamLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamLockRequest.ProtoReflect.Descriptor instead.
func (*SetTeamLockRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{11}
}

func (x *SetTeamLockRequest) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *SetTeamLockRequest) GetIsLock() bool {
	if x != nil {
		return x.IsLock
	}
	return false
}

// 设定开团锁定状态响应
type SetTeamLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTeamLockResponse) Reset() {
	*x = SetTeamLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeamLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamLockResponse) ProtoMessage() {}

func (x *SetTeamLockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamLockResponse.ProtoReflect.Descriptor instead.
func (*SetTeamLockResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{12}
}

// 设定开团关闭状态请求
type SetTeamCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId  int64 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id"`    // 开团id
	IsClose bool  `protobuf:"varint,2,opt,name=is_close,json=isClose,proto3" json:"is_close"` // 是否关闭
}

func (x *SetTeamCloseRequest) Reset() {
	*x = SetTeamCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeamCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamCloseRequest) ProtoMessage() {}

func (x *SetTeamCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamCloseRequest.ProtoReflect.Descriptor instead.
func (*SetTeamCloseRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{13}
}

func (x *SetTeamCloseRequest) GetTeamId() int64 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *SetTeamCloseRequest) GetIsClose() bool {
	if x != nil {
		return x.IsClose
	}
	return false
}

// 设定开团关闭状态响应
type SetTeamCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTeamCloseResponse) Reset() {
	*x = SetTeamCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeamCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamCloseResponse) ProtoMessage() {}

func (x *SetTeamCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamCloseResponse.ProtoReflect.Descriptor instead.
func (*SetTeamCloseResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{14}
}

// 创建开团模板请求
type CreateTeamTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreaterId       int64  `protobuf:"varint,1,opt,name=creater_id,json=createrId,proto3" json:"creater_id"`                    // 创建者id
	CreaterQqNumber string `protobuf:"bytes,2,opt,name=creater_qq_number,json=createrQqNumber,proto3" json:"creater_qq_number"` // 创建者qq号
	LeagueId        int64  `protobuf:"varint,3,opt,name=league_id,json=leagueId,proto3" json:"league_id"`                       // 组织id
	Ukey            string `protobuf:"bytes,4,opt,name=ukey,proto3" json:"ukey"`                                                // 组织唯一标识
	Title           string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`                                              // 模板标题
	Rule            string `protobuf:"bytes,9,opt,name=rule,proto3" json:"rule"`                                                // 规则
	Notice          string `protobuf:"bytes,10,opt,name=notice,proto3" json:"notice"`                                           // 公告
}

func (x *CreateTeamTemplateRequest) Reset() {
	*x = CreateTeamTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamTemplateRequest) ProtoMessage() {}

func (x *CreateTeamTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamTemplateRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTeamTemplateRequest) GetCreaterId() int64 {
	if x != nil {
		return x.CreaterId
	}
	return 0
}

func (x *CreateTeamTemplateRequest) GetCreaterQqNumber() string {
	if x != nil {
		return x.CreaterQqNumber
	}
	return ""
}

func (x *CreateTeamTemplateRequest) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *CreateTeamTemplateRequest) GetUkey() string {
	if x != nil {
		return x.Ukey
	}
	return ""
}

func (x *CreateTeamTemplateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateTeamTemplateRequest) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *CreateTeamTemplateRequest) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

// 创建开团模板响应
type CreateTeamTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId int64 `protobuf:"varint,1,opt,name=template_id,json=templateId,proto3" json:"template_id"` // 模板id
}

func (x *CreateTeamTemplateResponse) Reset() {
	*x = CreateTeamTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamTemplateResponse) ProtoMessage() {}

func (x *CreateTeamTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateTeamTemplateResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTeamTemplateResponse) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

// 开团模板信息
type TeamTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId      int64  `protobuf:"varint,1,opt,name=template_id,json=templateId,proto3" json:"template_id"`                 // 模板id
	CreaterId       int64  `protobuf:"varint,2,opt,name=creater_id,json=createrId,proto3" json:"creater_id"`                    // 创建者id
	CreaterQqNumber string `protobuf:"bytes,3,opt,name=creater_qq_number,json=createrQqNumber,proto3" json:"creater_qq_number"` // 创建者qq号
	LeagueId        int64  `protobuf:"varint,4,opt,name=league_id,json=leagueId,proto3" json:"league_id"`                       // 组织id
	Ukey            string `protobuf:"bytes,5,opt,name=ukey,proto3" json:"ukey"`                                                // 组织唯一标识
	Title           string `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`                                              // 模板标题
	Rule            string `protobuf:"bytes,7,opt,name=rule,proto3" json:"rule"`                                                // 规则
	Notice          string `protobuf:"bytes,8,opt,name=notice,proto3" json:"notice"`                                            // 公告
	CreateTime      int64  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time"`                 // 创建时间
	UpdateTime      int64  `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3" json:"update_time"`                // 更新时间
}

func (x *TeamTemplateInfo) Reset() {
	*x = TeamTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamTemplateInfo) ProtoMessage() {}

func (x *TeamTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamTemplateInfo.ProtoReflect.Descriptor instead.
func (*TeamTemplateInfo) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{17}
}

func (x *TeamTemplateInfo) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *TeamTemplateInfo) GetCreaterId() int64 {
	if x != nil {
		return x.CreaterId
	}
	return 0
}

func (x *TeamTemplateInfo) GetCreaterQqNumber() string {
	if x != nil {
		return x.CreaterQqNumber
	}
	return ""
}

func (x *TeamTemplateInfo) GetLeagueId() int64 {
	if x != nil {
		return x.LeagueId
	}
	return 0
}

func (x *TeamTemplateInfo) GetUkey() string {
	if x != nil {
		return x.Ukey
	}
	return ""
}

func (x *TeamTemplateInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TeamTemplateInfo) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *TeamTemplateInfo) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *TeamTemplateInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TeamTemplateInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 获取开团模板列表请求
type ListTeamTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ukey      string `protobuf:"bytes,1,opt,name=ukey,proto3" json:"ukey"`                             // 组织唯一标识
	Page      int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page"`                            // 页码
	PageSize  int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`    // 每页数量
	PageCount int64  `protobuf:"varint,4,opt,name=page_count,json=pageCount,proto3" json:"page_count"` // 总页数
}

func (x *ListTeamTemplateRequest) Reset() {
	*x = ListTeamTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamTemplateRequest) ProtoMessage() {}

func (x *ListTeamTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamTemplateRequest.ProtoReflect.Descriptor instead.
func (*ListTeamTemplateRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{18}
}

func (x *ListTeamTemplateRequest) GetUkey() string {
	if x != nil {
		return x.Ukey
	}
	return ""
}

func (x *ListTeamTemplateRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTeamTemplateRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTeamTemplateRequest) GetPageCount() int64 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

// 获取开团模板列表响应
type ListTeamTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamTemplateInfos []*TeamTemplateInfo `protobuf:"bytes,1,rep,name=team_template_infos,json=teamTemplateInfos,proto3" json:"team_template_infos"` // 开团模板信息
}

func (x *ListTeamTemplateResponse) Reset() {
	*x = ListTeamTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamTemplateResponse) ProtoMessage() {}

func (x *ListTeamTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamTemplateResponse.ProtoReflect.Descriptor instead.
func (*ListTeamTemplateResponse) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{19}
}

func (x *ListTeamTemplateResponse) GetTeamTemplateInfos() []*TeamTemplateInfo {
	if x != nil {
		return x.TeamTemplateInfos
	}
	return nil
}

// 删除开团模板请求
type DeleteTeamTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId int64 `protobuf:"varint,1,opt,name=template_id,json=templateId,proto3" json:"template_id"` // 模板id
}

func (x *DeleteTeamTemplateRequest) Reset() {
	*x = DeleteTeamTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_xiaoyang_v1_team_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamTemplateRequest) ProtoMessage() {}

func (x *DeleteTeamTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_xiaoyang_v1_team_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamTemplateRequest) Descriptor() ([]byte, []int) {
	return file_api_xiaoyang_v1_team_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTeamTemplateRequest) GetTemplateId() int64 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

var File_api_xiaoyang_v1_team_proto protoreflect.FileDescriptor

var file_api_xiaoyang_v1_team_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70,
	0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x03, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x71, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x51, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x78, 0x75, 0x61, 0x6e,
	0x6a, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6b,
	0x58, 0x75, 0x61, 0x6e, 0x6a, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x79, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62,
	0x6f, 0x6f, 0x6b, 0x59, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0x2d, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x80, 0x04, 0x0a,
	0x08, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x71, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x51, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x78, 0x75, 0x61,
	0x6e, 0x6a, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f,
	0x6b, 0x58, 0x75, 0x61, 0x6e, 0x6a, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x79, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x62, 0x6f, 0x6f, 0x6b, 0x59, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x75, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6b, 0x65,
	0x79, 0x22, 0x52, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x6e, 0x67,
	0x65, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x78, 0x75, 0x61, 0x6e, 0x6a, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x62, 0x6f, 0x6f, 0x6b, 0x58, 0x75, 0x61, 0x6e, 0x6a, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x79, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x59, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4f, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd9, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x51, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x54,
	0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x71, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x51, 0x71, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x7d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x6d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78,
	0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x3c,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x32, 0xcb, 0x0e, 0x0a,
	0x0b, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x92, 0x41, 0x22, 0x12, 0x06, 0xe5, 0xbc, 0x80, 0xe5, 0x9b,
	0xa2, 0x1a, 0x06, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x12, 0xa3,
	0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x92, 0x41, 0x3a, 0x12, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbc, 0x80,
	0xe5, 0x9b, 0xa2, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x62, 0x10, 0x0a,
	0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0xbd, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69,
	0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x92, 0x41,
	0x4c, 0x12, 0x1b, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7, 0x83, 0xe7,
	0x9a, 0x84, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x1b,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0xb4, 0xbb, 0xe8, 0xb7, 0x83, 0xe7, 0x9a, 0x84, 0xe5,
	0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x62, 0x10, 0x0a, 0x0e, 0x0a,
	0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69,
	0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x92, 0x41,
	0x3a, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xbc, 0x80,
	0xe5, 0x9b, 0xa2, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x3a, 0x01, 0x2a, 0x1a, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x12, 0xc1,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5e, 0x92, 0x41, 0x40, 0x12, 0x15, 0xe8, 0xae, 0xbe, 0xe5, 0xae, 0x9a, 0xe5,
	0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe5, 0x8f, 0xaf, 0xe8, 0xa7, 0x81, 0xe6, 0x80, 0xa7, 0x1a, 0x15,
	0xe8, 0xae, 0xbe, 0xe5, 0xae, 0x9a, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe5, 0x8f, 0xaf, 0xe8,
	0xa7, 0x81, 0xe6, 0x80, 0xa7, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x61, 0x92, 0x41, 0x46, 0x12, 0x18, 0xe8, 0xae, 0xbe, 0xe5, 0xae, 0x9a,
	0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x1a, 0x18, 0xe8, 0xae, 0xbe, 0xe5, 0xae, 0x9a, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2,
	0xe9, 0x94, 0x81, 0xe5, 0xae, 0x9a, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x62, 0x10, 0x0a, 0x0e,
	0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0xc3, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69,
	0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x92, 0x41, 0x46, 0x12, 0x18, 0xe8,
	0xae, 0xbe, 0xe5, 0xae, 0x9a, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe5, 0x85, 0xb3, 0xe9, 0x97,
	0xad, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x1a, 0x18, 0xe8, 0xae, 0xbe, 0xe5, 0xae, 0x9a, 0xe5,
	0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0xc8, 0x01, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x92, 0x41,
	0x3a, 0x12, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x1a, 0x12, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xbc, 0x80,
	0xe5, 0x9b, 0xa2, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x67, 0x92, 0x41, 0x46, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbc,
	0x80, 0xe5, 0x9b, 0xa2, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x3a, 0x12, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5,
	0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x1a, 0x12, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe5, 0xbc, 0x80, 0xe5, 0x9b, 0xa2, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x62,
	0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x97, 0x02, 0x92, 0x41, 0xf6,
	0x01, 0x12, 0x18, 0x0a, 0x11, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x20, 0x61, 0x70,
	0x69, 0x20, 0x64, 0x6f, 0x63, 0x73, 0x32, 0x03, 0x32, 0x2e, 0x30, 0x1a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x38, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x5a, 0xa1, 0x01, 0x0a, 0x4b, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x3d, 0x08, 0x02, 0x12, 0x28, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20,
	0x61, 0x20, 0x22, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x6a,
	0x77, 0x74, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x20, 0x74, 0x6f, 0x20, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x02, 0x0a, 0x52, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x44, 0x08, 0x02, 0x12, 0x33, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x20, 0x6b, 0x65,
	0x79, 0x20, 0x74, 0x6f, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x09, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x4b, 0x65, 0x79, 0x20, 0x02, 0x5a, 0x1b, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x78, 0x69, 0x61, 0x6f, 0x79, 0x61, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_xiaoyang_v1_team_proto_rawDescOnce sync.Once
	file_api_xiaoyang_v1_team_proto_rawDescData = file_api_xiaoyang_v1_team_proto_rawDesc
)

func file_api_xiaoyang_v1_team_proto_rawDescGZIP() []byte {
	file_api_xiaoyang_v1_team_proto_rawDescOnce.Do(func() {
		file_api_xiaoyang_v1_team_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_xiaoyang_v1_team_proto_rawDescData)
	})
	return file_api_xiaoyang_v1_team_proto_rawDescData
}

var file_api_xiaoyang_v1_team_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_api_xiaoyang_v1_team_proto_goTypes = []any{
	(*CreateTeamRequest)(nil),          // 0: api.xiaoyang.v1.CreateTeamRequest
	(*CreateTeamResponse)(nil),         // 1: api.xiaoyang.v1.CreateTeamResponse
	(*TeamInfo)(nil),                   // 2: api.xiaoyang.v1.TeamInfo
	(*ListTeamRequest)(nil),            // 3: api.xiaoyang.v1.ListTeamRequest
	(*ListTeamResponse)(nil),           // 4: api.xiaoyang.v1.ListTeamResponse
	(*ListActiveTeamRequest)(nil),      // 5: api.xiaoyang.v1.ListActiveTeamRequest
	(*ListActiveTeamResponse)(nil),     // 6: api.xiaoyang.v1.ListActiveTeamResponse
	(*UpdateTeamRequest)(nil),          // 7: api.xiaoyang.v1.UpdateTeamRequest
	(*UpdateTeamResponse)(nil),         // 8: api.xiaoyang.v1.UpdateTeamResponse
	(*SetTeamVisibleRequest)(nil),      // 9: api.xiaoyang.v1.SetTeamVisibleRequest
	(*SetTeamVisibleResponse)(nil),     // 10: api.xiaoyang.v1.SetTeamVisibleResponse
	(*SetTeamLockRequest)(nil),         // 11: api.xiaoyang.v1.SetTeamLockRequest
	(*SetTeamLockResponse)(nil),        // 12: api.xiaoyang.v1.SetTeamLockResponse
	(*SetTeamCloseRequest)(nil),        // 13: api.xiaoyang.v1.SetTeamCloseRequest
	(*SetTeamCloseResponse)(nil),       // 14: api.xiaoyang.v1.SetTeamCloseResponse
	(*CreateTeamTemplateRequest)(nil),  // 15: api.xiaoyang.v1.CreateTeamTemplateRequest
	(*CreateTeamTemplateResponse)(nil), // 16: api.xiaoyang.v1.CreateTeamTemplateResponse
	(*TeamTemplateInfo)(nil),           // 17: api.xiaoyang.v1.TeamTemplateInfo
	(*ListTeamTemplateRequest)(nil),    // 18: api.xiaoyang.v1.ListTeamTemplateRequest
	(*ListTeamTemplateResponse)(nil),   // 19: api.xiaoyang.v1.ListTeamTemplateResponse
	(*DeleteTeamTemplateRequest)(nil),  // 20: api.xiaoyang.v1.DeleteTeamTemplateRequest
}
var file_api_xiaoyang_v1_team_proto_depIdxs = []int32{
	2,  // 0: api.xiaoyang.v1.ListTeamResponse.team_infos:type_name -> api.xiaoyang.v1.TeamInfo
	2,  // 1: api.xiaoyang.v1.ListActiveTeamResponse.team_infos:type_name -> api.xiaoyang.v1.TeamInfo
	17, // 2: api.xiaoyang.v1.ListTeamTemplateResponse.team_template_infos:type_name -> api.xiaoyang.v1.TeamTemplateInfo
	0,  // 3: api.xiaoyang.v1.TeamService.CreateTeam:input_type -> api.xiaoyang.v1.CreateTeamRequest
	3,  // 4: api.xiaoyang.v1.TeamService.ListTeam:input_type -> api.xiaoyang.v1.ListTeamRequest
	3,  // 5: api.xiaoyang.v1.TeamService.ListActiveTeam:input_type -> api.xiaoyang.v1.ListTeamRequest
	7,  // 6: api.xiaoyang.v1.TeamService.UpdateTeam:input_type -> api.xiaoyang.v1.UpdateTeamRequest
	9,  // 7: api.xiaoyang.v1.TeamService.SetTeamVisible:input_type -> api.xiaoyang.v1.SetTeamVisibleRequest
	9,  // 8: api.xiaoyang.v1.TeamService.SetTeamLock:input_type -> api.xiaoyang.v1.SetTeamVisibleRequest
	9,  // 9: api.xiaoyang.v1.TeamService.SetTeamClose:input_type -> api.xiaoyang.v1.SetTeamVisibleRequest
	15, // 10: api.xiaoyang.v1.TeamService.CreateTeamTemplate:input_type -> api.xiaoyang.v1.CreateTeamTemplateRequest
	3,  // 11: api.xiaoyang.v1.TeamService.ListTeamTemplate:input_type -> api.xiaoyang.v1.ListTeamRequest
	9,  // 12: api.xiaoyang.v1.TeamService.DeleteTeamTemplate:input_type -> api.xiaoyang.v1.SetTeamVisibleRequest
	1,  // 13: api.xiaoyang.v1.TeamService.CreateTeam:output_type -> api.xiaoyang.v1.CreateTeamResponse
	4,  // 14: api.xiaoyang.v1.TeamService.ListTeam:output_type -> api.xiaoyang.v1.ListTeamResponse
	4,  // 15: api.xiaoyang.v1.TeamService.ListActiveTeam:output_type -> api.xiaoyang.v1.ListTeamResponse
	8,  // 16: api.xiaoyang.v1.TeamService.UpdateTeam:output_type -> api.xiaoyang.v1.UpdateTeamResponse
	10, // 17: api.xiaoyang.v1.TeamService.SetTeamVisible:output_type -> api.xiaoyang.v1.SetTeamVisibleResponse
	10, // 18: api.xiaoyang.v1.TeamService.SetTeamLock:output_type -> api.xiaoyang.v1.SetTeamVisibleResponse
	10, // 19: api.xiaoyang.v1.TeamService.SetTeamClose:output_type -> api.xiaoyang.v1.SetTeamVisibleResponse
	16, // 20: api.xiaoyang.v1.TeamService.CreateTeamTemplate:output_type -> api.xiaoyang.v1.CreateTeamTemplateResponse
	4,  // 21: api.xiaoyang.v1.TeamService.ListTeamTemplate:output_type -> api.xiaoyang.v1.ListTeamResponse
	10, // 22: api.xiaoyang.v1.TeamService.DeleteTeamTemplate:output_type -> api.xiaoyang.v1.SetTeamVisibleResponse
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_xiaoyang_v1_team_proto_init() }
func file_api_xiaoyang_v1_team_proto_init() {
	if File_api_xiaoyang_v1_team_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_xiaoyang_v1_team_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListActiveTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListActiveTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SetTeamVisibleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SetTeamVisibleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SetTeamLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SetTeamLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SetTeamCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SetTeamCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTeamTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CreateTeamTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TeamTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListTeamTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListTeamTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_xiaoyang_v1_team_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTeamTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_xiaoyang_v1_team_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_xiaoyang_v1_team_proto_goTypes,
		DependencyIndexes: file_api_xiaoyang_v1_team_proto_depIdxs,
		MessageInfos:      file_api_xiaoyang_v1_team_proto_msgTypes,
	}.Build()
	File_api_xiaoyang_v1_team_proto = out.File
	file_api_xiaoyang_v1_team_proto_rawDesc = nil
	file_api_xiaoyang_v1_team_proto_goTypes = nil
	file_api_xiaoyang_v1_team_proto_depIdxs = nil
}

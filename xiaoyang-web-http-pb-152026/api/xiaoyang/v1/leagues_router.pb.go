// Code generated by https://github.com/zhufuyi/sponge, DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	errcode "github.com/zhufuyi/sponge/pkg/errcode"
	middleware "github.com/zhufuyi/sponge/pkg/gin/middleware"
	zap "go.uber.org/zap"
	strings "strings"
)

// import packages: strings. context. errcode. middleware. zap. gin.

type LeaguesServiceLogicer interface {
	CreateLeague(ctx context.Context, req *CreateLeagueRequest) (*CreateLeagueResponse, error)
	ListLeagues(ctx context.Context, req *ListLeaguesRequest) (*ListLeaguesResponse, error)
	GetLeague(ctx context.Context, req *GetLeagueRequest) (*GetLeagueResponse, error)
	UpdateLeague(ctx context.Context, req *UpdateLeagueRequest) (*UpdateLeagueResponse, error)
	UpdateLeagueExpiredAt(ctx context.Context, req *UpdateLeagueExpiredAtRequest) (*UpdateLeagueExpiredAtResponse, error)
	JoinLeague(ctx context.Context, req *JoinLeagueRequest) (*JoinLeagueResponse, error)
	SetUserRole(ctx context.Context, req *SetUserRoleRequest) (*SetUserRoleResponse, error)
	SetUserNickname(ctx context.Context, req *SetUserNicknameRequest) (*SetUserNicknameResponse, error)
	ListLeagueMembers(ctx context.Context, req *ListLeagueMembersRequest) (*ListLeagueMembersResponse, error)
}

type LeaguesServiceOption func(*leaguesServiceOptions)

type leaguesServiceOptions struct {
	isFromRPC  bool
	responser  errcode.Responser
	zapLog     *zap.Logger
	httpErrors []*errcode.Error
	rpcStatus  []*errcode.RPCStatus
	wrapCtxFn  func(c *gin.Context) context.Context
}

func (o *leaguesServiceOptions) apply(opts ...LeaguesServiceOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func WithLeaguesServiceHTTPResponse() LeaguesServiceOption {
	return func(o *leaguesServiceOptions) {
		o.isFromRPC = false
	}
}

func WithLeaguesServiceRPCResponse() LeaguesServiceOption {
	return func(o *leaguesServiceOptions) {
		o.isFromRPC = true
	}
}

func WithLeaguesServiceResponser(responser errcode.Responser) LeaguesServiceOption {
	return func(o *leaguesServiceOptions) {
		o.responser = responser
	}
}

func WithLeaguesServiceLogger(zapLog *zap.Logger) LeaguesServiceOption {
	return func(o *leaguesServiceOptions) {
		o.zapLog = zapLog
	}
}

func WithLeaguesServiceErrorToHTTPCode(e ...*errcode.Error) LeaguesServiceOption {
	return func(o *leaguesServiceOptions) {
		o.httpErrors = e
	}
}

func WithLeaguesServiceRPCStatusToHTTPCode(s ...*errcode.RPCStatus) LeaguesServiceOption {
	return func(o *leaguesServiceOptions) {
		o.rpcStatus = s
	}
}

func WithLeaguesServiceWrapCtx(wrapCtxFn func(c *gin.Context) context.Context) LeaguesServiceOption {
	return func(o *leaguesServiceOptions) {
		o.wrapCtxFn = wrapCtxFn
	}
}

func RegisterLeaguesServiceRouter(
	iRouter gin.IRouter,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iLogic LeaguesServiceLogicer,
	opts ...LeaguesServiceOption) {

	o := &leaguesServiceOptions{}
	o.apply(opts...)

	if o.responser == nil {
		o.responser = errcode.NewResponser(o.isFromRPC, o.httpErrors, o.rpcStatus)
	}
	if o.zapLog == nil {
		o.zapLog, _ = zap.NewProduction()
	}

	r := &leaguesServiceRouter{
		iRouter:               iRouter,
		groupPathMiddlewares:  groupPathMiddlewares,
		singlePathMiddlewares: singlePathMiddlewares,
		iLogic:                iLogic,
		iResponse:             o.responser,
		zapLog:                o.zapLog,
		wrapCtxFn:             o.wrapCtxFn,
	}
	r.register()
}

type leaguesServiceRouter struct {
	iRouter               gin.IRouter
	groupPathMiddlewares  map[string][]gin.HandlerFunc
	singlePathMiddlewares map[string][]gin.HandlerFunc
	iLogic                LeaguesServiceLogicer
	iResponse             errcode.Responser
	zapLog                *zap.Logger
	wrapCtxFn             func(c *gin.Context) context.Context
}

func (r *leaguesServiceRouter) register() {
	r.iRouter.Handle("POST", "/v1/leagues", r.withMiddleware("POST", "/v1/leagues", r.CreateLeague_0)...)
	r.iRouter.Handle("GET", "/v1/leagues/list", r.withMiddleware("GET", "/v1/leagues/list", r.ListLeagues_0)...)
	r.iRouter.Handle("GET", "/v1/leagues/:ukey", r.withMiddleware("GET", "/v1/leagues/:ukey", r.GetLeague_0)...)
	r.iRouter.Handle("PUT", "/v1/leagues/:ukey", r.withMiddleware("PUT", "/v1/leagues/:ukey", r.UpdateLeague_0)...)
	r.iRouter.Handle("PUT", "/v1/leagues/:ukey/expired_at", r.withMiddleware("PUT", "/v1/leagues/:ukey/expired_at", r.UpdateLeagueExpiredAt_0)...)
	r.iRouter.Handle("POST", "/v1/leagues/:ukey/join", r.withMiddleware("POST", "/v1/leagues/:ukey/join", r.JoinLeague_0)...)
	r.iRouter.Handle("PUT", "/v1/leagues/:ukey/user_role", r.withMiddleware("PUT", "/v1/leagues/:ukey/user_role", r.SetUserRole_0)...)
	r.iRouter.Handle("PUT", "/v1/leagues/:ukey/user_nickname", r.withMiddleware("PUT", "/v1/leagues/:ukey/user_nickname", r.SetUserNickname_0)...)
	r.iRouter.Handle("GET", "/v1/leagues/:ukey/members", r.withMiddleware("GET", "/v1/leagues/:ukey/members", r.ListLeagueMembers_0)...)

}

func (r *leaguesServiceRouter) withMiddleware(method string, path string, fn gin.HandlerFunc) []gin.HandlerFunc {
	handlerFns := []gin.HandlerFunc{}

	// determine if a route group is hit or miss, left prefix rule
	for groupPath, fns := range r.groupPathMiddlewares {
		if groupPath == "" || groupPath == "/" {
			handlerFns = append(handlerFns, fns...)
			continue
		}
		size := len(groupPath)
		if len(path) < size {
			continue
		}
		if groupPath == path[:size] {
			handlerFns = append(handlerFns, fns...)
		}
	}

	// determine if a single route has been hit
	key := strings.ToUpper(method) + "->" + path
	if fns, ok := r.singlePathMiddlewares[key]; ok {
		handlerFns = append(handlerFns, fns...)
	}

	return append(handlerFns, fn)
}

var _ middleware.CtxKeyString

func (r *leaguesServiceRouter) CreateLeague_0(c *gin.Context) {
	req := &CreateLeagueRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CreateLeague(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) ListLeagues_0(c *gin.Context) {
	req := &ListLeaguesRequest{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListLeagues(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) GetLeague_0(c *gin.Context) {
	req := &GetLeagueRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.GetLeague(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) UpdateLeague_0(c *gin.Context) {
	req := &UpdateLeagueRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UpdateLeague(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) UpdateLeagueExpiredAt_0(c *gin.Context) {
	req := &UpdateLeagueExpiredAtRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.UpdateLeagueExpiredAt(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) JoinLeague_0(c *gin.Context) {
	req := &JoinLeagueRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.JoinLeague(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) SetUserRole_0(c *gin.Context) {
	req := &SetUserRoleRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.SetUserRole(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) SetUserNickname_0(c *gin.Context) {
	req := &SetUserNicknameRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.SetUserNickname(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *leaguesServiceRouter) ListLeagueMembers_0(c *gin.Context) {
	req := &ListLeagueMembersRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListLeagueMembers(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

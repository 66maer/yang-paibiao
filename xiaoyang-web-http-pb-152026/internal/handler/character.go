// Code generated by https://github.com/zhufuyi/sponge

package handler

import (
	"context"

	//"github.com/zhufuyi/sponge/pkg/gin/middleware"

	xiaoyangV1 "xiaoyang/api/xiaoyang/v1"
)

var _ xiaoyangV1.CharacterServiceLogicer = (*characterServiceHandler)(nil)

type characterServiceHandler struct {
	// example:
	// 	characterServiceDao dao.CharacterServiceDao
}

// NewCharacterServiceHandler create a handler
func NewCharacterServiceHandler() xiaoyangV1.CharacterServiceLogicer {
	return &characterServiceHandler{
		// example:
		// 	characterServiceDao: dao.NewCharacterServiceDao(
		// 		model.GetDB(),
		// 		cache.NewCharacterServiceCache(model.GetCacheType()),
		// 	),
	}
}

// CreateCharacter 创建角色
func (h *characterServiceHandler) CreateCharacter(ctx context.Context, req *xiaoyangV1.CreateCharacterRequest) (*xiaoyangV1.CreateCharacterResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.characterServiceDao.CreateCharacter(ctx, &model.CharacterService{
	//     	Character: req.Character,
	//     })
	// 	if err != nil {
	//			logger.Warn("CreateCharacter error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.CreateCharacterResponse{
	//     	Id: reply.Id,
	//     }, nil
}

// ListCharacter 获取用户的角色列表
func (h *characterServiceHandler) ListCharacter(ctx context.Context, req *xiaoyangV1.ListCharacterRequest) (*xiaoyangV1.ListCharacterResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.characterServiceDao.ListCharacter(ctx, &model.CharacterService{
	//     	UserId: req.UserId,
	//     	QqNumber: req.QqNumber,
	//     })
	// 	if err != nil {
	//			logger.Warn("ListCharacter error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.ListCharacterResponse{
	//     	CharacterList: reply.CharacterList,
	//     }, nil
}

// DeleteCharacter 删除角色
func (h *characterServiceHandler) DeleteCharacter(ctx context.Context, req *xiaoyangV1.DeleteCharacterRequest) (*xiaoyangV1.DeleteCharacterResponse, error) {
	//panic("implement me")

	println("删除角色逻辑")
	return &xiaoyangV1.DeleteCharacterResponse{}, nil

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.characterServiceDao.DeleteCharacter(ctx, &model.CharacterService{
	//     	Id: req.Id,
	//     })
	// 	if err != nil {
	//			logger.Warn("DeleteCharacter error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.DeleteCharacterResponse{
	//     }, nil
}

// UpdateCharacter 更新角色
func (h *characterServiceHandler) UpdateCharacter(ctx context.Context, req *xiaoyangV1.UpdateCharacterRequest) (*xiaoyangV1.UpdateCharacterResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.characterServiceDao.UpdateCharacter(ctx, &model.CharacterService{
	//     	Id: req.Id,
	//     	Character: req.Character,
	//     })
	// 	if err != nil {
	//			logger.Warn("UpdateCharacter error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.UpdateCharacterResponse{
	//     }, nil
}

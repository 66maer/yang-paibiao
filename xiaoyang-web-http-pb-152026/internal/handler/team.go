// Code generated by https://github.com/zhufuyi/sponge

package handler

import (
	"context"

	//"github.com/zhufuyi/sponge/pkg/gin/middleware"

	xiaoyangV1 "xiaoyang/api/xiaoyang/v1"
)

var _ xiaoyangV1.TeamServiceLogicer = (*teamServiceHandler)(nil)

type teamServiceHandler struct {
	// example:
	// 	teamServiceDao dao.TeamServiceDao
}

// NewTeamServiceHandler create a handler
func NewTeamServiceHandler() xiaoyangV1.TeamServiceLogicer {
	return &teamServiceHandler{
		// example:
		// 	teamServiceDao: dao.NewTeamServiceDao(
		// 		model.GetDB(),
		// 		cache.NewTeamServiceCache(model.GetCacheType()),
		// 	),
	}
}

// CreateTeam 开团
func (h *teamServiceHandler) CreateTeam(ctx context.Context, req *xiaoyangV1.CreateTeamRequest) (*xiaoyangV1.CreateTeamResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.CreateTeam(ctx, &model.TeamService{
	//     	CreaterId: req.CreaterId,
	//     	CreaterQqNumber: req.CreaterQqNumber,
	//     	LeagueId: req.LeagueId,
	//     	Ukey: req.Ukey,
	//     	Title: req.Title,
	//     	TeamTime: req.TeamTime,
	//     	DungeonName: req.DungeonName,
	//     	BookXuanjing: req.BookXuanjing,
	//     	BookYuntie: req.BookYuntie,
	//     	IsVisible: req.IsVisible,
	//     	IsLock: req.IsLock,
	//     	Rule: req.Rule,
	//     	Notice: req.Notice,
	//     })
	// 	if err != nil {
	//			logger.Warn("CreateTeam error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.CreateTeamResponse{
	//     	TeamId: reply.TeamId,
	//     }, nil
}

// ListTeam 获取开团列表
func (h *teamServiceHandler) ListTeam(ctx context.Context, req *xiaoyangV1.ListTeamRequest) (*xiaoyangV1.ListTeamResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.ListTeam(ctx, &model.TeamService{
	//     	Ukey: req.Ukey,
	//     	Page: req.Page,
	//     	PageSize: req.PageSize,
	//     	PageCount: req.PageCount,
	//     })
	// 	if err != nil {
	//			logger.Warn("ListTeam error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.ListTeamResponse{
	//     	TeamInfos: reply.TeamInfos,
	//     }, nil
}

// ListActiveTeam 获取活跃的开团列表
func (h *teamServiceHandler) ListActiveTeam(ctx context.Context, req *xiaoyangV1.ListTeamRequest) (*xiaoyangV1.ListTeamResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.ListActiveTeam(ctx, &model.TeamService{
	//     	Ukey: req.Ukey,
	//     	Page: req.Page,
	//     	PageSize: req.PageSize,
	//     	PageCount: req.PageCount,
	//     })
	// 	if err != nil {
	//			logger.Warn("ListActiveTeam error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.ListTeamResponse{
	//     	TeamInfos: reply.TeamInfos,
	//     }, nil
}

// UpdateTeam 更新开团信息
func (h *teamServiceHandler) UpdateTeam(ctx context.Context, req *xiaoyangV1.UpdateTeamRequest) (*xiaoyangV1.UpdateTeamResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.UpdateTeam(ctx, &model.TeamService{
	//     	TeamId: req.TeamId,
	//     	LeagueId: req.LeagueId,
	//     	Title: req.Title,
	//     	TeamTime: req.TeamTime,
	//     	DungeonName: req.DungeonName,
	//     	BookXuanjing: req.BookXuanjing,
	//     	BookYuntie: req.BookYuntie,
	//     	IsVisible: req.IsVisible,
	//     	IsLock: req.IsLock,
	//     	Rule: req.Rule,
	//     	Notice: req.Notice,
	//     	IsClose: req.IsClose,
	//     })
	// 	if err != nil {
	//			logger.Warn("UpdateTeam error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.UpdateTeamResponse{
	//     }, nil
}

// SetTeamVisible 设定开团可见性
func (h *teamServiceHandler) SetTeamVisible(ctx context.Context, req *xiaoyangV1.SetTeamVisibleRequest) (*xiaoyangV1.SetTeamVisibleResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.SetTeamVisible(ctx, &model.TeamService{
	//     	TeamId: req.TeamId,
	//     	IsVisible: req.IsVisible,
	//     })
	// 	if err != nil {
	//			logger.Warn("SetTeamVisible error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.SetTeamVisibleResponse{
	//     }, nil
}

// SetTeamLock 设定开团锁定状态
func (h *teamServiceHandler) SetTeamLock(ctx context.Context, req *xiaoyangV1.SetTeamVisibleRequest) (*xiaoyangV1.SetTeamVisibleResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.SetTeamLock(ctx, &model.TeamService{
	//     	TeamId: req.TeamId,
	//     	IsVisible: req.IsVisible,
	//     })
	// 	if err != nil {
	//			logger.Warn("SetTeamLock error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.SetTeamVisibleResponse{
	//     }, nil
}

// SetTeamClose 设定开团关闭状态
func (h *teamServiceHandler) SetTeamClose(ctx context.Context, req *xiaoyangV1.SetTeamVisibleRequest) (*xiaoyangV1.SetTeamVisibleResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.SetTeamClose(ctx, &model.TeamService{
	//     	TeamId: req.TeamId,
	//     	IsVisible: req.IsVisible,
	//     })
	// 	if err != nil {
	//			logger.Warn("SetTeamClose error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.SetTeamVisibleResponse{
	//     }, nil
}

// CreateTeamTemplate 创建开团模板
func (h *teamServiceHandler) CreateTeamTemplate(ctx context.Context, req *xiaoyangV1.CreateTeamTemplateRequest) (*xiaoyangV1.CreateTeamTemplateResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.CreateTeamTemplate(ctx, &model.TeamService{
	//     	CreaterId: req.CreaterId,
	//     	CreaterQqNumber: req.CreaterQqNumber,
	//     	LeagueId: req.LeagueId,
	//     	Ukey: req.Ukey,
	//     	Title: req.Title,
	//     	Rule: req.Rule,
	//     	Notice: req.Notice,
	//     })
	// 	if err != nil {
	//			logger.Warn("CreateTeamTemplate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.CreateTeamTemplateResponse{
	//     	TemplateId: reply.TemplateId,
	//     }, nil
}

// ListTeamTemplate 获取开团模板列表
func (h *teamServiceHandler) ListTeamTemplate(ctx context.Context, req *xiaoyangV1.ListTeamRequest) (*xiaoyangV1.ListTeamResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.ListTeamTemplate(ctx, &model.TeamService{
	//     	Ukey: req.Ukey,
	//     	Page: req.Page,
	//     	PageSize: req.PageSize,
	//     	PageCount: req.PageCount,
	//     })
	// 	if err != nil {
	//			logger.Warn("ListTeamTemplate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.ListTeamResponse{
	//     	TeamInfos: reply.TeamInfos,
	//     }, nil
}

// DeleteTeamTemplate 删除开团模板
func (h *teamServiceHandler) DeleteTeamTemplate(ctx context.Context, req *xiaoyangV1.SetTeamVisibleRequest) (*xiaoyangV1.SetTeamVisibleResponse, error) {
	panic("implement me")

	// fill in the business logic code here
	// example:
	//	    err := req.Validate()
	//	    if err != nil {
	//		    logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
	//		    return nil, ecode.InvalidParams.Err()
	//	    }
	//
	// 	reply, err := h.teamServiceDao.DeleteTeamTemplate(ctx, &model.TeamService{
	//     	TeamId: req.TeamId,
	//     	IsVisible: req.IsVisible,
	//     })
	// 	if err != nil {
	//			logger.Warn("DeleteTeamTemplate error", logger.Err(err), middleware.CtxRequestIDField(ctx))
	//			return nil, ecode.InternalServerError.Err()
	//		}
	//
	//     return &xiaoyangV1.SetTeamVisibleResponse{
	//     }, nil
}

syntax = "proto3";

package api.xiaoyang.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "xiaoyang/api/xiaoyang/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080",
  base_path: "",
  info: {
    title: "xiaoyang api docs",
    version: "2.0",
  }
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Input a \"Bearer your-jwt-token\" to Value"
      }
    },
    security: {
      key: "LeagueAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "LeagueKey"
        description: "Input league key to Value Input league key to Value"
      }
    },
  }
};

service LeaguesService {
  // 创建组织
  rpc CreateLeague(CreateLeagueRequest) returns (CreateLeagueResponse) {
    option (google.api.http) = {
      post: "/v1/leagues"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "创建组织"
      description: "创建组织"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 获取组织列表
  rpc ListLeagues(ListLeaguesRequest) returns (ListLeaguesResponse) {
    option (google.api.http) = {
      post: "/v1/leagues/list"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取组织列表"
      description: "获取组织列表"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 获取组织详情
  rpc GetLeague(GetLeagueRequest) returns (GetLeagueResponse) {
    option (google.api.http) = {
      get: "/v1/leagues/{ukey}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取组织详情"
      description: "获取组织详情"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
        security_requirement: {
          key: "LeagueAuth"
          value: {}
        }
      }
    };
  }

  // 更新组织设置
  rpc UpdateLeague(UpdateLeagueRequest) returns (UpdateLeagueResponse) {
    option (google.api.http) = {
      put: "/v1/leagues/{ukey}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新组织"
      description: "更新组织"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
      security_requirement: {
        key: "LeagueAuth"
        value: {}
      }
    };
  }

  // 更新组织过期时间
  rpc UpdateLeagueExpiredAt(UpdateLeagueExpiredAtRequest) returns (UpdateLeagueExpiredAtResponse) {
    option (google.api.http) = {
      put: "/v1/leagues/{ukey}/expired_at"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新组织过期时间"
      description: "更新组织过期时间"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
        security_requirement: {
          key: "LeagueAuth"
          value: {}
        }
      }
    };
  }

  // 将用户加入组织
  rpc JoinLeague(JoinLeagueRequest) returns (JoinLeagueResponse) {
    option (google.api.http) = {
      post: "/v1/leagues/{ukey}/join"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "加入组织"
      description: "加入组织"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 设定用户在组织中的角色
  rpc SetUserRole(SetUserRoleRequest) returns (SetUserRoleResponse) {
    option (google.api.http) = {
      put: "/v1/leagues/{ukey}/user_role"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "设定用户在组织中的角色"
      description: "设定用户在组织中的角色"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 修改用户在组织中的昵称
  rpc SetUserNickname(SetUserNicknameRequest) returns (SetUserNicknameResponse) {
    option (google.api.http) = {
      put: "/v1/leagues/{ukey}/user_nickname"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "修改用户在组织中的昵称"
      description: "修改用户在组织中的昵称"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }

  // 获取组织成员列表
  rpc ListLeagueMembers(ListLeagueMembersRequest) returns (ListLeagueMembersResponse) {
    option (google.api.http) = {
      get: "/v1/leagues/{ukey}/members"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取组织成员列表"
      description: "获取组织成员列表"
      security: {
        security_requirement: {
          key: "BearerAuth"
          value: {}
        }
      }
    };
  }
}

// 创建组织请求
message CreateLeagueRequest {
  int64 user_id = 1;        // 创建人ID(admin)
  string qq_number = 2;     // 创建人QQ号(admin)
  string group_number = 3;  // 群号
  string ukey = 4;          // 群唯一标识
  string name = 5;          // 群名称
  string server = 6;        // 服务器
  string avatar = 7;        // 群头像
  int64 expired_at = 8;     // 过期时间
  string preferences = 9;   // 偏好设置
}

// 创建组织响应
message CreateLeagueResponse {
  int64 id = 1;  // 组织ID
}

// 组织信息摘要
message LeagueSummary {
  int64 id = 1;             // 组织ID
  string group_number = 2;  // 群号
  string ukey = 3;          // 群唯一标识
  string name = 4;          // 群名称
  string server = 5;        // 服务器
  string avatar = 6;        // 群头像
}

// 获取组织列表请求
message ListLeaguesRequest {
  int64 user_id = 1;     // 用户ID
  string qq_number = 2;  // 用户QQ号
}

// 获取组织列表响应
message ListLeaguesResponse {
  repeated LeagueSummary leagues = 1;  // 组织列表
}

// 获取组织详情请求
message GetLeagueRequest {
  int64 id = 1;     // 组织ID
  string ukey = 2;  // 群唯一标识
}

// 获取组织详情响应
message GetLeagueResponse {
  int64 id = 1;             // 组织ID
  string group_number = 2;  // 群号
  string ukey = 3;          // 群唯一标识
  string name = 4;          // 群名称
  string server = 5;        // 服务器
  string avatar = 6;        // 群头像
  int64 expired_at = 7;     // 过期时间
  string preferences = 8;   // 偏好设置
}

// 更新组织请求
message UpdateLeagueRequest {
  int64 id = 1;             // 组织ID
  string group_number = 2;  // 群号
  string ukey = 3;          // 群唯一标识
  string name = 4;          // 群名称
  string server = 5;        // 服务器
  string avatar = 6;        // 群头像
  string preferences = 8;   // 偏好设置
}

// 更新组织响应
message UpdateLeagueResponse {}

// 更新组织过期时间请求
message UpdateLeagueExpiredAtRequest {
  int64 id = 1;          // 组织ID
  string ukey = 2;       // 群唯一标识
  int64 expired_at = 3;  // 过期时间
}

// 更新组织过期时间响应
message UpdateLeagueExpiredAtResponse {}

// 加入组织请求
message JoinLeagueRequest {
  int64 user_id = 1;          // 用户ID
  string qq_number = 2;       // 用户QQ号
  string group_number = 3;    // 群号
  int64 group_id = 4;         // 组织ID
  string ukey = 5;            // 群唯一标识
  string role = 6;            // 角色
  string group_nickname = 7;  // 群昵称
}

// 加入组织响应
message JoinLeagueResponse {}

// 设定用户在组织中的角色请求
message SetUserRoleRequest {
  int64 user_id = 1;     // 用户ID
  string qq_number = 2;  // 用户QQ号
  int64 group_id = 3;    // 组织ID
  string ukey = 4;       // 群唯一标识
  string role = 5;       // 角色
}

// 设定用户在组织中的角色响应
message SetUserRoleResponse {}

// 修改用户在组织中的昵称请求
message SetUserNicknameRequest {
  int64 user_id = 1;     // 用户ID
  string qq_number = 2;  // 用户QQ号
  int64 group_id = 3;    // 组织ID
  string ukey = 4;       // 群唯一标识
  string nickname = 5;   // 昵称
}

// 修改用户在组织中的昵称响应
message SetUserNicknameResponse {}

// 组织成员信息摘要
message LeagueMemberSummary {
  int64 user_id = 1;          // 用户ID
  string qq_number = 2;       // 用户QQ号
  string nickname = 3;        // 昵称
  string avatar = 4;          // 头像
  string role = 5;            // 角色
  string group_nickname = 6;  // 群昵称
}

// 获取组织成员列表请求
message ListLeagueMembersRequest {
  int64 group_id = 1;  // 组织ID
  string ukey = 2;     // 群唯一标识
}

// 获取组织成员列表响应
message ListLeagueMembersResponse {
  repeated LeagueMemberSummary members = 1;  // 组织成员列表
}